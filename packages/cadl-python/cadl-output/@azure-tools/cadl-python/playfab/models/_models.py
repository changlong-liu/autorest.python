# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class AbortFileUploadsRequest(_model_base.Model):
    """Aborts the pending upload of the requested files.

    All required parameters must be populated in order to send to Azure.

    :ivar custom_tags: The optional custom tags associated with the request (e.g. build number,
     external trace identifiers, etc.).
    :vartype custom_tags: ~playfab.models.object
    :ivar entity: The entity to perform this action on. Required.
    :vartype entity: ~playfab.models.EntityKey
    :ivar file_names: Names of the files to have their pending uploads aborted. Required.
    :vartype file_names: list[str]
    :ivar profile_version: The expected version of the profile, if set and doesn't match the
     current
     version of the profile the operation will not be performed.
    :vartype profile_version: float
    """

    custom_tags: Optional["_models.object"] = rest_field(name="CustomTags")
    """The optional custom tags associated with the request (e.g. build number,
external trace identifiers, etc.). """
    entity: "_models.EntityKey" = rest_field(name="Entity")
    """The entity to perform this action on. Required. """
    file_names: List[str] = rest_field(name="FileNames")
    """Names of the files to have their pending uploads aborted. Required. """
    profile_version: Optional[float] = rest_field(name="ProfileVersion")
    """The expected version of the profile, if set and doesn't match the current
version of the profile the operation will not be performed. """

    @overload
    def __init__(
        self,
        *,
        entity: "_models.EntityKey",
        file_names: List[str],
        custom_tags: Optional["_models.object"] = None,
        profile_version: Optional[float] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AbortFileUploadsResponse(_model_base.Model):
    """AbortFileUploadsResponse.

    :ivar code: The HTTP status code. If X-ReportErrorAsSuccess header is set to true, the
     service will return 200 and this will report the actual HTTP status code.
    :vartype code: int
    :ivar status: The HTTP status code as a string.
    :vartype status: str
    :ivar data:
    :vartype data: ~playfab.models.AbortFileUploadsResponse_data
    """

    code: Optional[int] = rest_field()
    """The HTTP status code. If X-ReportErrorAsSuccess header is set to true, the
service will return 200 and this will report the actual HTTP status code. """
    status: Optional[str] = rest_field()
    """The HTTP status code as a string. """
    data: Optional["_models.AbortFileUploadsResponse_data"] = rest_field()

    @overload
    def __init__(
        self,
        *,
        code: Optional[int] = None,
        status: Optional[str] = None,
        data: Optional["_models.AbortFileUploadsResponse_data"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AbortFileUploadsResponse_data(_model_base.Model):
    """AbortFileUploadsResponse_data.

    :ivar entity: The entity id and type.
    :vartype entity: ~playfab.models.EntityKey
    :ivar profile_version: The current version of the profile, can be used for concurrency control
     during
     updates.
    :vartype profile_version: float
    """

    entity: Optional["_models.EntityKey"] = rest_field(name="Entity")
    """The entity id and type. """
    profile_version: Optional[float] = rest_field(name="ProfileVersion")
    """The current version of the profile, can be used for concurrency control during
updates. """

    @overload
    def __init__(
        self,
        *,
        entity: Optional["_models.EntityKey"] = None,
        profile_version: Optional[float] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ApiErrorWrapper(_model_base.Model):
    """The basic wrapper around every failed API response.

    All required parameters must be populated in order to send to Azure.

    :ivar code: Numerical HTTP code. Required.
    :vartype code: int
    :ivar status: String HTTP code.
    :vartype status: str
    :ivar error: Playfab error code.
    :vartype error: str
    :ivar error_code: Numerical PlayFab error code. Required.
    :vartype error_code: int
    :ivar error_message: Description for the PlayFab errorCode.
    :vartype error_message: str
    :ivar error_details: Detailed description of individual issues with the request object.
    :vartype error_details: ~playfab.models.object
    """

    code: int = rest_field()
    """Numerical HTTP code. Required. """
    status: Optional[str] = rest_field()
    """String HTTP code. """
    error: Optional[str] = rest_field()
    """Playfab error code. """
    error_code: int = rest_field(name="errorCode")
    """Numerical PlayFab error code. Required. """
    error_message: Optional[str] = rest_field(name="errorMessage")
    """Description for the PlayFab errorCode. """
    error_details: Optional["_models.object"] = rest_field(name="errorDetails")
    """Detailed description of individual issues with the request object. """

    @overload
    def __init__(
        self,
        *,
        code: int,
        error_code: int,
        status: Optional[str] = None,
        error: Optional[str] = None,
        error_message: Optional[str] = None,
        error_details: Optional["_models.object"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AuthenticateAndroidDeviceIdIdentityRequest(_model_base.Model):
    """AuthenticateAndroidDeviceIdIdentityRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar android_device_id: Identifier for the user's android device. Required.
    :vartype android_device_id: str
    :ivar behavior_if_identity_not_linked: Controls what happens if the authenticated player
     identity is not yet
     associated with a master_player_account in the player account pool.
     'CreateAndLinkNewAccount' (default) creates a new master_player_account entity
     and associates the player identity with it. 'LinkToExistingAccount' attempts to
     associate the player identity with the master_player_account entity specified
     by 'ExistingMasterPlayerAccountId', returning an 'AccountAlreadyLinked' error
     if the master_player_account is already associated with another player
     identity. 'LeaveUnlinked' leaves the player identity unlinked and returns the
     'AccountNotFound' error. Required. Known values are: "CreateAndLinkNewAccount",
     "LinkToExistingAccount", and "LeaveUnlinked".
    :vartype behavior_if_identity_not_linked: str or ~playfab.models.AccountLinkAction
    :ivar custom_tags: The optional custom tags associated with the request (e.g. build number,
     external trace identifiers, etc.).
    :vartype custom_tags: ~playfab.models.object
    :ivar existing_master_player_account_id: Optional master_player_account entity in the player
     account pool to associate
     with the authenticated player identity. When specified, then the request must
     be authenticated as either the same master_player_account (with an entity token
     obtained from a previous authentication API call) or as another entity
     authorized to make calls on behalf of it, such as a title entity in the same
     player account pool (with a title secret key).
    :vartype existing_master_player_account_id: str
    :ivar player_account_pool_id: The player account pool containing the player account
     (master_player_account
     entity) to be looked-up or created for the identity. The player account pool ID
     is also known as the "publisher ID" or "namespace ID". Required.
    :vartype player_account_pool_id: str
    :ivar title_id: Optional title to log the master_player_account into after authenticating the
     player. This option can be used to combine the player authentication and title
     login operations in a single API request, avoiding a second API request to
     'TitlePlayer/LoginPlayer'. When specified, an entity token for the
     title_player_account entity is returned in the 'TitlePlayerAccountEntityToken'
     property of the response.
    :vartype title_id: str
    """

    android_device_id: str = rest_field(name="AndroidDeviceId")
    """Identifier for the user's android device. Required. """
    behavior_if_identity_not_linked: Union[str, "_models.AccountLinkAction"] = rest_field(
        name="BehaviorIfIdentityNotLinked"
    )
    """Controls what happens if the authenticated player identity is not yet
associated with a master_player_account in the player account pool.
'CreateAndLinkNewAccount' (default) creates a new master_player_account entity
and associates the player identity with it. 'LinkToExistingAccount' attempts to
associate the player identity with the master_player_account entity specified
by 'ExistingMasterPlayerAccountId', returning an 'AccountAlreadyLinked' error
if the master_player_account is already associated with another player
identity. 'LeaveUnlinked' leaves the player identity unlinked and returns the
'AccountNotFound' error. Required. Known values are: \"CreateAndLinkNewAccount\", \"LinkToExistingAccount\", and \"LeaveUnlinked\"."""
    custom_tags: Optional["_models.object"] = rest_field(name="CustomTags")
    """The optional custom tags associated with the request (e.g. build number,
external trace identifiers, etc.). """
    existing_master_player_account_id: Optional[str] = rest_field(name="ExistingMasterPlayerAccountId")
    """Optional master_player_account entity in the player account pool to associate
with the authenticated player identity. When specified, then the request must
be authenticated as either the same master_player_account (with an entity token
obtained from a previous authentication API call) or as another entity
authorized to make calls on behalf of it, such as a title entity in the same
player account pool (with a title secret key). """
    player_account_pool_id: str = rest_field(name="PlayerAccountPoolId")
    """The player account pool containing the player account (master_player_account
entity) to be looked-up or created for the identity. The player account pool ID
is also known as the \"publisher ID\" or \"namespace ID\". Required. """
    title_id: Optional[str] = rest_field(name="TitleId")
    """Optional title to log the master_player_account into after authenticating the
player. This option can be used to combine the player authentication and title
login operations in a single API request, avoiding a second API request to
'TitlePlayer/LoginPlayer'. When specified, an entity token for the
title_player_account entity is returned in the 'TitlePlayerAccountEntityToken'
property of the response. """

    @overload
    def __init__(
        self,
        *,
        android_device_id: str,
        behavior_if_identity_not_linked: Union[str, "_models.AccountLinkAction"],
        player_account_pool_id: str,
        custom_tags: Optional["_models.object"] = None,
        existing_master_player_account_id: Optional[str] = None,
        title_id: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AuthenticateCustomIdIdentityRequest(_model_base.Model):
    """AuthenticateCustomIdIdentityRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar behavior_if_identity_not_linked: Controls what happens if the authenticated player
     identity is not yet
     associated with a master_player_account in the player account pool.
     'CreateAndLinkNewAccount' (default) creates a new master_player_account entity
     and associates the player identity with it. 'LinkToExistingAccount' attempts to
     associate the player identity with the master_player_account entity specified
     by 'ExistingMasterPlayerAccountId', returning an 'AccountAlreadyLinked' error
     if the master_player_account is already associated with another player
     identity. 'LeaveUnlinked' leaves the player identity unlinked and returns the
     'AccountNotFound' error. Required. Known values are: "CreateAndLinkNewAccount",
     "LinkToExistingAccount", and "LeaveUnlinked".
    :vartype behavior_if_identity_not_linked: str or ~playfab.models.AccountLinkAction
    :ivar custom_id: Custom string value which uniquely identifies a player identity within the
     player account pool. Required.
    :vartype custom_id: str
    :ivar custom_tags: The optional custom tags associated with the request (e.g. build number,
     external trace identifiers, etc.).
    :vartype custom_tags: ~playfab.models.object
    :ivar existing_master_player_account_id: Optional master_player_account entity in the player
     account pool to associate
     with the authenticated player identity. When specified, then the request must
     be authenticated as either the same master_player_account (with an entity token
     obtained from a previous authentication API call) or as another entity
     authorized to make calls on behalf of it, such as a title entity in the same
     player account pool (with a title secret key).
    :vartype existing_master_player_account_id: str
    :ivar player_account_pool_id: The player account pool containing the player account
     (master_player_account
     entity) to be looked-up or created for the identity. The player account pool ID
     is also known as the "publisher ID" or "namespace ID". Required.
    :vartype player_account_pool_id: str
    :ivar title_id: Optional title to log the master_player_account into after authenticating the
     player. This option can be used to combine the player authentication and title
     login operations in a single API request, avoiding a second API request to
     'TitlePlayer/LoginPlayer'. When specified, an entity token for the
     title_player_account entity is returned in the 'TitlePlayerAccountEntityToken'
     property of the response.
    :vartype title_id: str
    """

    behavior_if_identity_not_linked: Union[str, "_models.AccountLinkAction"] = rest_field(
        name="BehaviorIfIdentityNotLinked"
    )
    """Controls what happens if the authenticated player identity is not yet
associated with a master_player_account in the player account pool.
'CreateAndLinkNewAccount' (default) creates a new master_player_account entity
and associates the player identity with it. 'LinkToExistingAccount' attempts to
associate the player identity with the master_player_account entity specified
by 'ExistingMasterPlayerAccountId', returning an 'AccountAlreadyLinked' error
if the master_player_account is already associated with another player
identity. 'LeaveUnlinked' leaves the player identity unlinked and returns the
'AccountNotFound' error. Required. Known values are: \"CreateAndLinkNewAccount\", \"LinkToExistingAccount\", and \"LeaveUnlinked\"."""
    custom_id: str = rest_field(name="CustomId")
    """Custom string value which uniquely identifies a player identity within the
player account pool. Required. """
    custom_tags: Optional["_models.object"] = rest_field(name="CustomTags")
    """The optional custom tags associated with the request (e.g. build number,
external trace identifiers, etc.). """
    existing_master_player_account_id: Optional[str] = rest_field(name="ExistingMasterPlayerAccountId")
    """Optional master_player_account entity in the player account pool to associate
with the authenticated player identity. When specified, then the request must
be authenticated as either the same master_player_account (with an entity token
obtained from a previous authentication API call) or as another entity
authorized to make calls on behalf of it, such as a title entity in the same
player account pool (with a title secret key). """
    player_account_pool_id: str = rest_field(name="PlayerAccountPoolId")
    """The player account pool containing the player account (master_player_account
entity) to be looked-up or created for the identity. The player account pool ID
is also known as the \"publisher ID\" or \"namespace ID\". Required. """
    title_id: Optional[str] = rest_field(name="TitleId")
    """Optional title to log the master_player_account into after authenticating the
player. This option can be used to combine the player authentication and title
login operations in a single API request, avoiding a second API request to
'TitlePlayer/LoginPlayer'. When specified, an entity token for the
title_player_account entity is returned in the 'TitlePlayerAccountEntityToken'
property of the response. """

    @overload
    def __init__(
        self,
        *,
        behavior_if_identity_not_linked: Union[str, "_models.AccountLinkAction"],
        custom_id: str,
        player_account_pool_id: str,
        custom_tags: Optional["_models.object"] = None,
        existing_master_player_account_id: Optional[str] = None,
        title_id: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AuthenticateIdentityResult(_model_base.Model):
    """AuthenticateIdentityResult.

    :ivar code: The HTTP status code. If X-ReportErrorAsSuccess header is set to true, the
     service will return 200 and this will report the actual HTTP status code.
    :vartype code: int
    :ivar status: The HTTP status code as a string.
    :vartype status: str
    :ivar data:
    :vartype data: ~playfab.models.AuthenticateIdentityResult_data
    """

    code: Optional[int] = rest_field()
    """The HTTP status code. If X-ReportErrorAsSuccess header is set to true, the
service will return 200 and this will report the actual HTTP status code. """
    status: Optional[str] = rest_field()
    """The HTTP status code as a string. """
    data: Optional["_models.AuthenticateIdentityResult_data"] = rest_field()

    @overload
    def __init__(
        self,
        *,
        code: Optional[int] = None,
        status: Optional[str] = None,
        data: Optional["_models.AuthenticateIdentityResult_data"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AuthenticateIdentityResult_data(_model_base.Model):
    """AuthenticateIdentityResult_data.

    :ivar created_identity_link_id: Unique identifier of the link between the player identity and
     associated
     master_player_account, if a new link was created as directed by the value of
     'BehaviorIfIdentityNotLinked'.
    :vartype created_identity_link_id: str
    :ivar master_player_account: Entity token for the master_player_account linked to the
     authenticated player
     identity.
    :vartype master_player_account: ~playfab.models.EntityTokenResponse
    :ivar title_player_account: Entity token for the title_player_account for the
     master_player_account and
     title, if TitleId is specified in the request.
    :vartype title_player_account: ~playfab.models.EntityTokenResponse
    """

    created_identity_link_id: Optional[str] = rest_field(name="CreatedIdentityLinkId")
    """Unique identifier of the link between the player identity and associated
master_player_account, if a new link was created as directed by the value of
'BehaviorIfIdentityNotLinked'. """
    master_player_account: Optional["_models.EntityTokenResponse"] = rest_field(name="MasterPlayerAccount")
    """Entity token for the master_player_account linked to the authenticated player
identity. """
    title_player_account: Optional["_models.EntityTokenResponse"] = rest_field(name="TitlePlayerAccount")
    """Entity token for the title_player_account for the master_player_account and
title, if TitleId is specified in the request. """

    @overload
    def __init__(
        self,
        *,
        created_identity_link_id: Optional[str] = None,
        master_player_account: Optional["_models.EntityTokenResponse"] = None,
        title_player_account: Optional["_models.EntityTokenResponse"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AuthenticateIOSDeviceIdIdentityRequest(_model_base.Model):
    """AuthenticateIOSDeviceIdIdentityRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar behavior_if_identity_not_linked: Controls what happens if the authenticated player
     identity is not yet
     associated with a master_player_account in the player account pool.
     'CreateAndLinkNewAccount' (default) creates a new master_player_account entity
     and associates the player identity with it. 'LinkToExistingAccount' attempts to
     associate the player identity with the master_player_account entity specified
     by 'ExistingMasterPlayerAccountId', returning an 'AccountAlreadyLinked' error
     if the master_player_account is already associated with another player
     identity. 'LeaveUnlinked' leaves the player identity unlinked and returns the
     'AccountNotFound' error. Required. Known values are: "CreateAndLinkNewAccount",
     "LinkToExistingAccount", and "LeaveUnlinked".
    :vartype behavior_if_identity_not_linked: str or ~playfab.models.AccountLinkAction
    :ivar custom_tags: The optional custom tags associated with the request (e.g. build number,
     external trace identifiers, etc.).
    :vartype custom_tags: ~playfab.models.object
    :ivar device_id: Vendor-specific iOS identifier for the user's device. Required.
    :vartype device_id: str
    :ivar existing_master_player_account_id: Optional master_player_account entity in the player
     account pool to associate
     with the authenticated player identity. When specified, then the request must
     be authenticated as either the same master_player_account (with an entity token
     obtained from a previous authentication API call) or as another entity
     authorized to make calls on behalf of it, such as a title entity in the same
     player account pool (with a title secret key).
    :vartype existing_master_player_account_id: str
    :ivar player_account_pool_id: The player account pool containing the player account
     (master_player_account
     entity) to be looked-up or created for the identity. The player account pool ID
     is also known as the "publisher ID" or "namespace ID". Required.
    :vartype player_account_pool_id: str
    :ivar title_id: Optional title to log the master_player_account into after authenticating the
     player. This option can be used to combine the player authentication and title
     login operations in a single API request, avoiding a second API request to
     'TitlePlayer/LoginPlayer'. When specified, an entity token for the
     title_player_account entity is returned in the 'TitlePlayerAccountEntityToken'
     property of the response.
    :vartype title_id: str
    """

    behavior_if_identity_not_linked: Union[str, "_models.AccountLinkAction"] = rest_field(
        name="BehaviorIfIdentityNotLinked"
    )
    """Controls what happens if the authenticated player identity is not yet
associated with a master_player_account in the player account pool.
'CreateAndLinkNewAccount' (default) creates a new master_player_account entity
and associates the player identity with it. 'LinkToExistingAccount' attempts to
associate the player identity with the master_player_account entity specified
by 'ExistingMasterPlayerAccountId', returning an 'AccountAlreadyLinked' error
if the master_player_account is already associated with another player
identity. 'LeaveUnlinked' leaves the player identity unlinked and returns the
'AccountNotFound' error. Required. Known values are: \"CreateAndLinkNewAccount\", \"LinkToExistingAccount\", and \"LeaveUnlinked\"."""
    custom_tags: Optional["_models.object"] = rest_field(name="CustomTags")
    """The optional custom tags associated with the request (e.g. build number,
external trace identifiers, etc.). """
    device_id: str = rest_field(name="DeviceId")
    """Vendor-specific iOS identifier for the user's device. Required. """
    existing_master_player_account_id: Optional[str] = rest_field(name="ExistingMasterPlayerAccountId")
    """Optional master_player_account entity in the player account pool to associate
with the authenticated player identity. When specified, then the request must
be authenticated as either the same master_player_account (with an entity token
obtained from a previous authentication API call) or as another entity
authorized to make calls on behalf of it, such as a title entity in the same
player account pool (with a title secret key). """
    player_account_pool_id: str = rest_field(name="PlayerAccountPoolId")
    """The player account pool containing the player account (master_player_account
entity) to be looked-up or created for the identity. The player account pool ID
is also known as the \"publisher ID\" or \"namespace ID\". Required. """
    title_id: Optional[str] = rest_field(name="TitleId")
    """Optional title to log the master_player_account into after authenticating the
player. This option can be used to combine the player authentication and title
login operations in a single API request, avoiding a second API request to
'TitlePlayer/LoginPlayer'. When specified, an entity token for the
title_player_account entity is returned in the 'TitlePlayerAccountEntityToken'
property of the response. """

    @overload
    def __init__(
        self,
        *,
        behavior_if_identity_not_linked: Union[str, "_models.AccountLinkAction"],
        device_id: str,
        player_account_pool_id: str,
        custom_tags: Optional["_models.object"] = None,
        existing_master_player_account_id: Optional[str] = None,
        title_id: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AuthenticateNintendoSwitchDeviceIDIdentityRequest(_model_base.Model):
    """AuthenticateNintendoSwitchDeviceIDIdentityRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar behavior_if_identity_not_linked: Controls what happens if the authenticated player
     identity is not yet
     associated with a master_player_account in the player account pool.
     'CreateAndLinkNewAccount' (default) creates a new master_player_account entity
     and associates the player identity with it. 'LinkToExistingAccount' attempts to
     associate the player identity with the master_player_account entity specified
     by 'ExistingMasterPlayerAccountId', returning an 'AccountAlreadyLinked' error
     if the master_player_account is already associated with another player
     identity. 'LeaveUnlinked' leaves the player identity unlinked and returns the
     'AccountNotFound' error. Required. Known values are: "CreateAndLinkNewAccount",
     "LinkToExistingAccount", and "LeaveUnlinked".
    :vartype behavior_if_identity_not_linked: str or ~playfab.models.AccountLinkAction
    :ivar custom_tags: The optional custom tags associated with the request (e.g. build number,
     external trace identifiers, etc.).
    :vartype custom_tags: ~playfab.models.object
    :ivar existing_master_player_account_id: Optional master_player_account entity in the player
     account pool to associate
     with the authenticated player identity. When specified, then the request must
     be authenticated as either the same master_player_account (with an entity token
     obtained from a previous authentication API call) or as another entity
     authorized to make calls on behalf of it, such as a title entity in the same
     player account pool (with a title secret key).
    :vartype existing_master_player_account_id: str
    :ivar nintendo_switch_device_id: Identifier for the user's android device. Required.
    :vartype nintendo_switch_device_id: str
    :ivar player_account_pool_id: The player account pool containing the player account
     (master_player_account
     entity) to be looked-up or created for the identity. The player account pool ID
     is also known as the "publisher ID" or "namespace ID". Required.
    :vartype player_account_pool_id: str
    :ivar title_id: Optional title to log the master_player_account into after authenticating the
     player. This option can be used to combine the player authentication and title
     login operations in a single API request, avoiding a second API request to
     'TitlePlayer/LoginPlayer'. When specified, an entity token for the
     title_player_account entity is returned in the 'TitlePlayerAccountEntityToken'
     property of the response.
    :vartype title_id: str
    """

    behavior_if_identity_not_linked: Union[str, "_models.AccountLinkAction"] = rest_field(
        name="BehaviorIfIdentityNotLinked"
    )
    """Controls what happens if the authenticated player identity is not yet
associated with a master_player_account in the player account pool.
'CreateAndLinkNewAccount' (default) creates a new master_player_account entity
and associates the player identity with it. 'LinkToExistingAccount' attempts to
associate the player identity with the master_player_account entity specified
by 'ExistingMasterPlayerAccountId', returning an 'AccountAlreadyLinked' error
if the master_player_account is already associated with another player
identity. 'LeaveUnlinked' leaves the player identity unlinked and returns the
'AccountNotFound' error. Required. Known values are: \"CreateAndLinkNewAccount\", \"LinkToExistingAccount\", and \"LeaveUnlinked\"."""
    custom_tags: Optional["_models.object"] = rest_field(name="CustomTags")
    """The optional custom tags associated with the request (e.g. build number,
external trace identifiers, etc.). """
    existing_master_player_account_id: Optional[str] = rest_field(name="ExistingMasterPlayerAccountId")
    """Optional master_player_account entity in the player account pool to associate
with the authenticated player identity. When specified, then the request must
be authenticated as either the same master_player_account (with an entity token
obtained from a previous authentication API call) or as another entity
authorized to make calls on behalf of it, such as a title entity in the same
player account pool (with a title secret key). """
    nintendo_switch_device_id: str = rest_field(name="NintendoSwitchDeviceId")
    """Identifier for the user's android device. Required. """
    player_account_pool_id: str = rest_field(name="PlayerAccountPoolId")
    """The player account pool containing the player account (master_player_account
entity) to be looked-up or created for the identity. The player account pool ID
is also known as the \"publisher ID\" or \"namespace ID\". Required. """
    title_id: Optional[str] = rest_field(name="TitleId")
    """Optional title to log the master_player_account into after authenticating the
player. This option can be used to combine the player authentication and title
login operations in a single API request, avoiding a second API request to
'TitlePlayer/LoginPlayer'. When specified, an entity token for the
title_player_account entity is returned in the 'TitlePlayerAccountEntityToken'
property of the response. """

    @overload
    def __init__(
        self,
        *,
        behavior_if_identity_not_linked: Union[str, "_models.AccountLinkAction"],
        nintendo_switch_device_id: str,
        player_account_pool_id: str,
        custom_tags: Optional["_models.object"] = None,
        existing_master_player_account_id: Optional[str] = None,
        title_id: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DeleteFilesRequest(_model_base.Model):
    """Deletes the requested files from the entity's profile.

    All required parameters must be populated in order to send to Azure.

    :ivar custom_tags: The optional custom tags associated with the request (e.g. build number,
     external trace identifiers, etc.).
    :vartype custom_tags: ~playfab.models.object
    :ivar entity: The entity to perform this action on. Required.
    :vartype entity: ~playfab.models.EntityKey
    :ivar file_names: Names of the files to be deleted. Required.
    :vartype file_names: list[str]
    :ivar profile_version: The expected version of the profile, if set and doesn't match the
     current
     version of the profile the operation will not be performed.
    :vartype profile_version: float
    """

    custom_tags: Optional["_models.object"] = rest_field(name="CustomTags")
    """The optional custom tags associated with the request (e.g. build number,
external trace identifiers, etc.). """
    entity: "_models.EntityKey" = rest_field(name="Entity")
    """The entity to perform this action on. Required. """
    file_names: List[str] = rest_field(name="FileNames")
    """Names of the files to be deleted. Required. """
    profile_version: Optional[float] = rest_field(name="ProfileVersion")
    """The expected version of the profile, if set and doesn't match the current
version of the profile the operation will not be performed. """

    @overload
    def __init__(
        self,
        *,
        entity: "_models.EntityKey",
        file_names: List[str],
        custom_tags: Optional["_models.object"] = None,
        profile_version: Optional[float] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DeleteFilesResponse(_model_base.Model):
    """DeleteFilesResponse.

    :ivar code: The HTTP status code. If X-ReportErrorAsSuccess header is set to true, the
     service will return 200 and this will report the actual HTTP status code.
    :vartype code: int
    :ivar status: The HTTP status code as a string.
    :vartype status: str
    :ivar data:
    :vartype data: ~playfab.models.DeleteFilesResponse_data
    """

    code: Optional[int] = rest_field()
    """The HTTP status code. If X-ReportErrorAsSuccess header is set to true, the
service will return 200 and this will report the actual HTTP status code. """
    status: Optional[str] = rest_field()
    """The HTTP status code as a string. """
    data: Optional["_models.DeleteFilesResponse_data"] = rest_field()

    @overload
    def __init__(
        self,
        *,
        code: Optional[int] = None,
        status: Optional[str] = None,
        data: Optional["_models.DeleteFilesResponse_data"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DeleteFilesResponse_data(_model_base.Model):
    """DeleteFilesResponse_data.

    :ivar entity: The entity id and type.
    :vartype entity: ~playfab.models.EntityKey
    :ivar profile_version: The current version of the profile, can be used for concurrency control
     during
     updates.
    :vartype profile_version: float
    """

    entity: Optional["_models.EntityKey"] = rest_field(name="Entity")
    """The entity id and type. """
    profile_version: Optional[float] = rest_field(name="ProfileVersion")
    """The current version of the profile, can be used for concurrency control during
updates. """

    @overload
    def __init__(
        self,
        *,
        entity: Optional["_models.EntityKey"] = None,
        profile_version: Optional[float] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class EntityKey(_model_base.Model):
    """Combined entity type and ID structure which uniquely identifies a single entity.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Unique ID of the entity. Required.
    :vartype id: str
    :ivar type: Entity type. See
    https://docs.microsoft.com/gaming/playfab/features/data/entities/available-built-in-entity-types.
    :vartype type: str
    """

    id: str = rest_field(name="Id")
    """Unique ID of the entity. Required. """
    type: Optional[str] = rest_field(name="Type")
    """Entity type. See
https://docs.microsoft.com/gaming/playfab/features/data/entities/available-built-in-entity-types. """

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        type: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class EntityTokenResponse(_model_base.Model):
    """EntityTokenResponse.

    :ivar entity: The entity id and type.
    :vartype entity: ~playfab.models.EntityKey
    :ivar entity_token: The token used to set X-EntityToken for all entity based API calls.
    :vartype entity_token: str
    :ivar token_expiration: The time the token will expire, if it is an expiring token, in UTC.
    :vartype token_expiration: str
    """

    entity: Optional["_models.EntityKey"] = rest_field(name="Entity")
    """The entity id and type. """
    entity_token: Optional[str] = rest_field(name="EntityToken")
    """The token used to set X-EntityToken for all entity based API calls. """
    token_expiration: Optional[str] = rest_field(name="TokenExpiration")
    """The time the token will expire, if it is an expiring token, in UTC. """

    @overload
    def __init__(
        self,
        *,
        entity: Optional["_models.EntityKey"] = None,
        entity_token: Optional[str] = None,
        token_expiration: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class EventContents(_model_base.Model):
    """EventContents.

    All required parameters must be populated in order to send to Azure.

    :ivar custom_tags: The optional custom tags associated with the event (e.g. build number,
     external
     trace identifiers, etc.). Before an event is written, this collection and the
     base request custom tags will be merged, but not overriden. This enables the
     caller to specify static tags and per event tags.
    :vartype custom_tags: ~playfab.models.object
    :ivar entity: Entity associated with the event. If null, the event will apply to the calling
     entity.
    :vartype entity: ~playfab.models.EntityKey
    :ivar event_namespace: The namespace in which the event is defined. Allowed namespaces can vary
     by API. Required.
    :vartype event_namespace: str
    :ivar name: The name of this event. Required.
    :vartype name: str
    :ivar original_id: The original unique identifier associated with this event before it was
     posted
     to PlayFab. The value might differ from the EventId value, which is assigned
     when the event is received by the server.
    :vartype original_id: str
    :ivar original_timestamp: The time (in UTC) associated with this event when it occurred. If
     specified,
     this value is stored in the OriginalTimestamp property of the PlayStream event.
    :vartype original_timestamp: str
    :ivar payload: Arbitrary data associated with the event. Only one of Payload or PayloadJSON is
     allowed.
    :vartype payload: ~playfab.models.object
    :ivar payload_j_s_o_n: Arbitrary data associated with the event, represented as a JSON
     serialized
     string. Only one of Payload or PayloadJSON is allowed.
    :vartype payload_j_s_o_n: str
    """

    custom_tags: Optional["_models.object"] = rest_field(name="CustomTags")
    """The optional custom tags associated with the event (e.g. build number, external
trace identifiers, etc.). Before an event is written, this collection and the
base request custom tags will be merged, but not overriden. This enables the
caller to specify static tags and per event tags. """
    entity: Optional["_models.EntityKey"] = rest_field(name="Entity")
    """Entity associated with the event. If null, the event will apply to the calling
entity. """
    event_namespace: str = rest_field(name="EventNamespace")
    """The namespace in which the event is defined. Allowed namespaces can vary by API. Required. """
    name: str = rest_field(name="Name")
    """The name of this event. Required. """
    original_id: Optional[str] = rest_field(name="OriginalId")
    """The original unique identifier associated with this event before it was posted
to PlayFab. The value might differ from the EventId value, which is assigned
when the event is received by the server. """
    original_timestamp: Optional[str] = rest_field(name="OriginalTimestamp")
    """The time (in UTC) associated with this event when it occurred. If specified,
this value is stored in the OriginalTimestamp property of the PlayStream event. """
    payload: Optional["_models.object"] = rest_field(name="Payload")
    """Arbitrary data associated with the event. Only one of Payload or PayloadJSON is
allowed. """
    payload_j_s_o_n: Optional[str] = rest_field(name="PayloadJSON")
    """Arbitrary data associated with the event, represented as a JSON serialized
string. Only one of Payload or PayloadJSON is allowed. """

    @overload
    def __init__(
        self,
        *,
        event_namespace: str,
        name: str,
        custom_tags: Optional["_models.object"] = None,
        entity: Optional["_models.EntityKey"] = None,
        original_id: Optional[str] = None,
        original_timestamp: Optional[str] = None,
        payload: Optional["_models.object"] = None,
        payload_j_s_o_n: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class FinalizeFileUploadsRequest(_model_base.Model):
    """Finalizes the upload of the requested files. Verifies that the files have been
    successfully uploaded and moves the file pointers from pending to live.

    All required parameters must be populated in order to send to Azure.

    :ivar custom_tags: The optional custom tags associated with the request (e.g. build number,
     external trace identifiers, etc.).
    :vartype custom_tags: ~playfab.models.object
    :ivar entity: The entity to perform this action on. Required.
    :vartype entity: ~playfab.models.EntityKey
    :ivar file_names: Names of the files to be finalized. Restricted to a-Z, 0-9, '(', ')', '_',
     '-'
     and '.'. Required.
    :vartype file_names: list[str]
    :ivar profile_version: The current version of the profile, can be used for concurrency control
     during
     updates. Required.
    :vartype profile_version: float
    """

    custom_tags: Optional["_models.object"] = rest_field(name="CustomTags")
    """The optional custom tags associated with the request (e.g. build number,
external trace identifiers, etc.). """
    entity: "_models.EntityKey" = rest_field(name="Entity")
    """The entity to perform this action on. Required. """
    file_names: List[str] = rest_field(name="FileNames")
    """Names of the files to be finalized. Restricted to a-Z, 0-9, '(', ')', '_', '-'
and '.'. Required. """
    profile_version: float = rest_field(name="ProfileVersion")
    """The current version of the profile, can be used for concurrency control during
updates. Required. """

    @overload
    def __init__(
        self,
        *,
        entity: "_models.EntityKey",
        file_names: List[str],
        profile_version: float,
        custom_tags: Optional["_models.object"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class FinalizeFileUploadsResponse(_model_base.Model):
    """FinalizeFileUploadsResponse.

    :ivar code: The HTTP status code. If X-ReportErrorAsSuccess header is set to true, the
     service will return 200 and this will report the actual HTTP status code.
    :vartype code: int
    :ivar status: The HTTP status code as a string.
    :vartype status: str
    :ivar data:
    :vartype data: ~playfab.models.FinalizeFileUploadsResponse_data
    """

    code: Optional[int] = rest_field()
    """The HTTP status code. If X-ReportErrorAsSuccess header is set to true, the
service will return 200 and this will report the actual HTTP status code. """
    status: Optional[str] = rest_field()
    """The HTTP status code as a string. """
    data: Optional["_models.FinalizeFileUploadsResponse_data"] = rest_field()

    @overload
    def __init__(
        self,
        *,
        code: Optional[int] = None,
        status: Optional[str] = None,
        data: Optional["_models.FinalizeFileUploadsResponse_data"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class FinalizeFileUploadsResponse_data(_model_base.Model):
    """FinalizeFileUploadsResponse_data.

    :ivar entity: The entity id and type.
    :vartype entity: ~playfab.models.EntityKey
    :ivar metadata: Collection of metadata for the entity's files.
    :vartype metadata: ~playfab.models.GetFileMetadata
    :ivar profile_version: The current version of the profile, can be used for concurrency control
     during
     updates.
    :vartype profile_version: float
    """

    entity: Optional["_models.EntityKey"] = rest_field(name="Entity")
    """The entity id and type. """
    metadata: Optional["_models.GetFileMetadata"] = rest_field(name="Metadata")
    """Collection of metadata for the entity's files. """
    profile_version: Optional[float] = rest_field(name="ProfileVersion")
    """The current version of the profile, can be used for concurrency control during
updates. """

    @overload
    def __init__(
        self,
        *,
        entity: Optional["_models.EntityKey"] = None,
        metadata: Optional["_models.GetFileMetadata"] = None,
        profile_version: Optional[float] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class GetEntityTokenRequest(_model_base.Model):
    """This API must be called with X-SecretKey, X-Authentication or X-EntityToken
    headers. An optional EntityKey may be included to attempt to set the resulting
    EntityToken to a specific entity, however the entity must be a relation of the
    caller, such as the master_player_account of a character. If sending
    X-EntityToken the account will be marked as freshly logged in and will issue a
    new token. If using X-Authentication or X-EntityToken the header must still be
    valid and cannot be expired or revoked.

    :ivar custom_tags: The optional custom tags associated with the request (e.g. build number,
     external trace identifiers, etc.).
    :vartype custom_tags: ~playfab.models.object
    :ivar entity: The optional entity to perform this action on. Defaults to the currently logged
     in entity.
    :vartype entity: ~playfab.models.EntityKey
    """

    custom_tags: Optional["_models.object"] = rest_field(name="CustomTags")
    """The optional custom tags associated with the request (e.g. build number,
external trace identifiers, etc.). """
    entity: Optional["_models.EntityKey"] = rest_field(name="Entity")
    """The optional entity to perform this action on. Defaults to the currently logged
in entity. """

    @overload
    def __init__(
        self,
        *,
        custom_tags: Optional["_models.object"] = None,
        entity: Optional["_models.EntityKey"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class GetEntityTokenResponse(_model_base.Model):
    """GetEntityTokenResponse.

    :ivar code: The HTTP status code. If X-ReportErrorAsSuccess header is set to true, the
     service will return 200 and this will report the actual HTTP status code.
    :vartype code: int
    :ivar status: The HTTP status code as a string.
    :vartype status: str
    :ivar data:
    :vartype data: ~playfab.models.GetEntityTokenResponse_data
    """

    code: Optional[int] = rest_field()
    """The HTTP status code. If X-ReportErrorAsSuccess header is set to true, the
service will return 200 and this will report the actual HTTP status code. """
    status: Optional[str] = rest_field()
    """The HTTP status code as a string. """
    data: Optional["_models.GetEntityTokenResponse_data"] = rest_field()

    @overload
    def __init__(
        self,
        *,
        code: Optional[int] = None,
        status: Optional[str] = None,
        data: Optional["_models.GetEntityTokenResponse_data"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class GetEntityTokenResponse_data(_model_base.Model):
    """GetEntityTokenResponse_data.

    :ivar entity: The entity id and type.
    :vartype entity: ~playfab.models.EntityKey
    :ivar entity_token: The token used to set X-EntityToken for all entity based API calls.
    :vartype entity_token: str
    :ivar token_expiration: The time the token will expire, if it is an expiring token, in UTC.
    :vartype token_expiration: str
    """

    entity: Optional["_models.EntityKey"] = rest_field(name="Entity")
    """The entity id and type. """
    entity_token: Optional[str] = rest_field(name="EntityToken")
    """The token used to set X-EntityToken for all entity based API calls. """
    token_expiration: Optional[str] = rest_field(name="TokenExpiration")
    """The time the token will expire, if it is an expiring token, in UTC. """

    @overload
    def __init__(
        self,
        *,
        entity: Optional["_models.EntityKey"] = None,
        entity_token: Optional[str] = None,
        token_expiration: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class GetFileMetadata(_model_base.Model):
    """GetFileMetadata.

    All required parameters must be populated in order to send to Azure.

    :ivar checksum: Checksum value for the file, can be used to check if the file on the server has
     changed.
    :vartype checksum: str
    :ivar download_url: Download URL where the file can be retrieved.
    :vartype download_url: str
    :ivar file_name: Name of the file.
    :vartype file_name: str
    :ivar last_modified: Last UTC time the file was modified. Required.
    :vartype last_modified: str
    :ivar size: Storage service's reported byte count. Required.
    :vartype size: float
    """

    checksum: Optional[str] = rest_field(name="Checksum")
    """Checksum value for the file, can be used to check if the file on the server has
changed. """
    download_url: Optional[str] = rest_field(name="DownloadUrl")
    """Download URL where the file can be retrieved. """
    file_name: Optional[str] = rest_field(name="FileName")
    """Name of the file. """
    last_modified: str = rest_field(name="LastModified")
    """Last UTC time the file was modified. Required. """
    size: float = rest_field(name="Size")
    """Storage service's reported byte count. Required. """

    @overload
    def __init__(
        self,
        *,
        last_modified: str,
        size: float,
        checksum: Optional[str] = None,
        download_url: Optional[str] = None,
        file_name: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class GetFilesRequest(_model_base.Model):
    """Returns URLs that may be used to download the files for a profile for a limited
    length of time. Only returns files that have been successfully uploaded, files
    that are still pending will either return the old value, if it exists, or
    nothing.

    All required parameters must be populated in order to send to Azure.

    :ivar custom_tags: The optional custom tags associated with the request (e.g. build number,
     external trace identifiers, etc.).
    :vartype custom_tags: ~playfab.models.object
    :ivar entity: The entity to perform this action on. Required.
    :vartype entity: ~playfab.models.EntityKey
    """

    custom_tags: Optional["_models.object"] = rest_field(name="CustomTags")
    """The optional custom tags associated with the request (e.g. build number,
external trace identifiers, etc.). """
    entity: "_models.EntityKey" = rest_field(name="Entity")
    """The entity to perform this action on. Required. """

    @overload
    def __init__(
        self,
        *,
        entity: "_models.EntityKey",
        custom_tags: Optional["_models.object"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class GetFilesResponse(_model_base.Model):
    """GetFilesResponse.

    :ivar code: The HTTP status code. If X-ReportErrorAsSuccess header is set to true, the
     service will return 200 and this will report the actual HTTP status code.
    :vartype code: int
    :ivar status: The HTTP status code as a string.
    :vartype status: str
    :ivar data:
    :vartype data: ~playfab.models.GetFilesResponse_data
    """

    code: Optional[int] = rest_field()
    """The HTTP status code. If X-ReportErrorAsSuccess header is set to true, the
service will return 200 and this will report the actual HTTP status code. """
    status: Optional[str] = rest_field()
    """The HTTP status code as a string. """
    data: Optional["_models.GetFilesResponse_data"] = rest_field()

    @overload
    def __init__(
        self,
        *,
        code: Optional[int] = None,
        status: Optional[str] = None,
        data: Optional["_models.GetFilesResponse_data"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class GetFilesResponse_data(_model_base.Model):
    """GetFilesResponse_data.

    :ivar entity: The entity id and type.
    :vartype entity: ~playfab.models.EntityKey
    :ivar metadata: Collection of metadata for the entity's files.
    :vartype metadata: ~playfab.models.GetFileMetadata
    :ivar profile_version: The current version of the profile, can be used for concurrency control
     during
     updates.
    :vartype profile_version: float
    """

    entity: Optional["_models.EntityKey"] = rest_field(name="Entity")
    """The entity id and type. """
    metadata: Optional["_models.GetFileMetadata"] = rest_field(name="Metadata")
    """Collection of metadata for the entity's files. """
    profile_version: Optional[float] = rest_field(name="ProfileVersion")
    """The current version of the profile, can be used for concurrency control during
updates. """

    @overload
    def __init__(
        self,
        *,
        entity: Optional["_models.EntityKey"] = None,
        metadata: Optional["_models.GetFileMetadata"] = None,
        profile_version: Optional[float] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class GetLinkedPlayerIdentitiesRequest(_model_base.Model):
    """GetLinkedPlayerIdentitiesRequest.

    :ivar custom_tags: The optional custom tags associated with the request (e.g. build number,
     external trace identifiers, etc.).
    :vartype custom_tags: ~playfab.models.object
    :ivar master_player_account_id: master_player_account entity.
    :vartype master_player_account_id: str
    """

    custom_tags: Optional["_models.object"] = rest_field(name="CustomTags")
    """The optional custom tags associated with the request (e.g. build number,
external trace identifiers, etc.). """
    master_player_account_id: Optional[str] = rest_field(name="MasterPlayerAccountId")
    """master_player_account entity. """

    @overload
    def __init__(
        self,
        *,
        custom_tags: Optional["_models.object"] = None,
        master_player_account_id: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class GetLinkedPlayerIdentitiesResult(_model_base.Model):
    """GetLinkedPlayerIdentitiesResult.

    :ivar code: The HTTP status code. If X-ReportErrorAsSuccess header is set to true, the
     service will return 200 and this will report the actual HTTP status code.
    :vartype code: int
    :ivar status: The HTTP status code as a string.
    :vartype status: str
    :ivar data:
    :vartype data: ~playfab.models.GetLinkedPlayerIdentitiesResult_data
    """

    code: Optional[int] = rest_field()
    """The HTTP status code. If X-ReportErrorAsSuccess header is set to true, the
service will return 200 and this will report the actual HTTP status code. """
    status: Optional[str] = rest_field()
    """The HTTP status code as a string. """
    data: Optional["_models.GetLinkedPlayerIdentitiesResult_data"] = rest_field()

    @overload
    def __init__(
        self,
        *,
        code: Optional[int] = None,
        status: Optional[str] = None,
        data: Optional["_models.GetLinkedPlayerIdentitiesResult_data"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class GetLinkedPlayerIdentitiesResult_data(_model_base.Model):
    """GetLinkedPlayerIdentitiesResult_data.

    :ivar linked_identities: List of player identities currently linked to the
     master_player_account.
    :vartype linked_identities: list[~playfab.models.LinkedPlayerIdentity]
    """

    linked_identities: Optional[List["_models.LinkedPlayerIdentity"]] = rest_field(name="LinkedIdentities")
    """List of player identities currently linked to the master_player_account. """

    @overload
    def __init__(
        self,
        *,
        linked_identities: Optional[List["_models.LinkedPlayerIdentity"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class GetObjectsRequest(_model_base.Model):
    """Gets JSON objects from an entity profile and returns it.

    All required parameters must be populated in order to send to Azure.

    :ivar custom_tags: The optional custom tags associated with the request (e.g. build number,
     external trace identifiers, etc.).
    :vartype custom_tags: ~playfab.models.object
    :ivar entity: The entity to perform this action on. Required.
    :vartype entity: ~playfab.models.EntityKey
    :ivar escape_object: Determines whether the object will be returned as an escaped JSON string
     or as
     a un-escaped JSON object. Default is JSON object.
    :vartype escape_object: bool
    """

    custom_tags: Optional["_models.object"] = rest_field(name="CustomTags")
    """The optional custom tags associated with the request (e.g. build number,
external trace identifiers, etc.). """
    entity: "_models.EntityKey" = rest_field(name="Entity")
    """The entity to perform this action on. Required. """
    escape_object: Optional[bool] = rest_field(name="EscapeObject")
    """Determines whether the object will be returned as an escaped JSON string or as
a un-escaped JSON object. Default is JSON object. """

    @overload
    def __init__(
        self,
        *,
        entity: "_models.EntityKey",
        custom_tags: Optional["_models.object"] = None,
        escape_object: Optional[bool] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class GetObjectsResponse(_model_base.Model):
    """GetObjectsResponse.

    :ivar code: The HTTP status code. If X-ReportErrorAsSuccess header is set to true, the
     service will return 200 and this will report the actual HTTP status code.
    :vartype code: int
    :ivar status: The HTTP status code as a string.
    :vartype status: str
    :ivar data:
    :vartype data: ~playfab.models.GetObjectsResponse_data
    """

    code: Optional[int] = rest_field()
    """The HTTP status code. If X-ReportErrorAsSuccess header is set to true, the
service will return 200 and this will report the actual HTTP status code. """
    status: Optional[str] = rest_field()
    """The HTTP status code as a string. """
    data: Optional["_models.GetObjectsResponse_data"] = rest_field()

    @overload
    def __init__(
        self,
        *,
        code: Optional[int] = None,
        status: Optional[str] = None,
        data: Optional["_models.GetObjectsResponse_data"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class GetObjectsResponse_data(_model_base.Model):
    """GetObjectsResponse_data.

    :ivar entity: The entity id and type.
    :vartype entity: ~playfab.models.EntityKey
    :ivar objects: Requested objects that the calling entity has access to.
    :vartype objects: ~playfab.models.ObjectResult
    :ivar profile_version: The current version of the profile, can be used for concurrency control
     during
     updates.
    :vartype profile_version: float
    """

    entity: Optional["_models.EntityKey"] = rest_field(name="Entity")
    """The entity id and type. """
    objects: Optional["_models.ObjectResult"] = rest_field(name="Objects")
    """Requested objects that the calling entity has access to. """
    profile_version: Optional[float] = rest_field(name="ProfileVersion")
    """The current version of the profile, can be used for concurrency control during
updates. """

    @overload
    def __init__(
        self,
        *,
        entity: Optional["_models.EntityKey"] = None,
        objects: Optional["_models.ObjectResult"] = None,
        profile_version: Optional[float] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class InitiateFileUploadMetadata(_model_base.Model):
    """InitiateFileUploadMetadata.

    :ivar file_name: Name of the file.
    :vartype file_name: str
    :ivar upload_url: Location the data should be sent to via an HTTP PUT operation.
    :vartype upload_url: str
    """

    file_name: Optional[str] = rest_field(name="FileName")
    """Name of the file. """
    upload_url: Optional[str] = rest_field(name="UploadUrl")
    """Location the data should be sent to via an HTTP PUT operation. """

    @overload
    def __init__(
        self,
        *,
        file_name: Optional[str] = None,
        upload_url: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class InitiateFileUploadsRequest(_model_base.Model):
    """Returns URLs that may be used to upload the files for a profile 5 minutes.
    After using the upload calls FinalizeFileUploads must be called to move the
    file status from pending to live.

    All required parameters must be populated in order to send to Azure.

    :ivar custom_tags: The optional custom tags associated with the request (e.g. build number,
     external trace identifiers, etc.).
    :vartype custom_tags: ~playfab.models.object
    :ivar entity: The entity to perform this action on. Required.
    :vartype entity: ~playfab.models.EntityKey
    :ivar file_names: Names of the files to be set. Restricted to a-Z, 0-9, '(', ')', '_', '-' and
     '.'. Required.
    :vartype file_names: list[str]
    :ivar profile_version: The expected version of the profile, if set and doesn't match the
     current
     version of the profile the operation will not be performed.
    :vartype profile_version: float
    """

    custom_tags: Optional["_models.object"] = rest_field(name="CustomTags")
    """The optional custom tags associated with the request (e.g. build number,
external trace identifiers, etc.). """
    entity: "_models.EntityKey" = rest_field(name="Entity")
    """The entity to perform this action on. Required. """
    file_names: List[str] = rest_field(name="FileNames")
    """Names of the files to be set. Restricted to a-Z, 0-9, '(', ')', '_', '-' and '.'. Required. """
    profile_version: Optional[float] = rest_field(name="ProfileVersion")
    """The expected version of the profile, if set and doesn't match the current
version of the profile the operation will not be performed. """

    @overload
    def __init__(
        self,
        *,
        entity: "_models.EntityKey",
        file_names: List[str],
        custom_tags: Optional["_models.object"] = None,
        profile_version: Optional[float] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class InitiateFileUploadsResponse(_model_base.Model):
    """InitiateFileUploadsResponse.

    :ivar code: The HTTP status code. If X-ReportErrorAsSuccess header is set to true, the
     service will return 200 and this will report the actual HTTP status code.
    :vartype code: int
    :ivar status: The HTTP status code as a string.
    :vartype status: str
    :ivar data:
    :vartype data: ~playfab.models.InitiateFileUploadsResponse_data
    """

    code: Optional[int] = rest_field()
    """The HTTP status code. If X-ReportErrorAsSuccess header is set to true, the
service will return 200 and this will report the actual HTTP status code. """
    status: Optional[str] = rest_field()
    """The HTTP status code as a string. """
    data: Optional["_models.InitiateFileUploadsResponse_data"] = rest_field()

    @overload
    def __init__(
        self,
        *,
        code: Optional[int] = None,
        status: Optional[str] = None,
        data: Optional["_models.InitiateFileUploadsResponse_data"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class InitiateFileUploadsResponse_data(_model_base.Model):
    """InitiateFileUploadsResponse_data.

    :ivar entity: The entity id and type.
    :vartype entity: ~playfab.models.EntityKey
    :ivar profile_version: The current version of the profile, can be used for concurrency control
     during
     updates.
    :vartype profile_version: float
    :ivar upload_details: Collection of file names and upload urls.
    :vartype upload_details: list[~playfab.models.InitiateFileUploadMetadata]
    """

    entity: Optional["_models.EntityKey"] = rest_field(name="Entity")
    """The entity id and type. """
    profile_version: Optional[float] = rest_field(name="ProfileVersion")
    """The current version of the profile, can be used for concurrency control during
updates. """
    upload_details: Optional[List["_models.InitiateFileUploadMetadata"]] = rest_field(name="UploadDetails")
    """Collection of file names and upload urls. """

    @overload
    def __init__(
        self,
        *,
        entity: Optional["_models.EntityKey"] = None,
        profile_version: Optional[float] = None,
        upload_details: Optional[List["_models.InitiateFileUploadMetadata"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class LinkedPlayerIdentity(_model_base.Model):
    """LinkedPlayerIdentity.

    All required parameters must be populated in order to send to Azure.

    :ivar identity_link_id: Unique identifier of the link between the player identity and
     master_player_account.Can be used to specify the link in requests to
     UnlinkPlayerIdentity.
    :vartype identity_link_id: str
    :ivar identity_provider: The player identity provider in which the identity exists. Required.
     Known values are: "AndroidDevice", "Apple", "CustomId", "Email", "FacebookInstantGames",
     "GameCenter", "Google", "iOSDevice", "Kongregate", "NintendoSwitchDevice", "NintendoAccount",
     "OpenId", "PSN", "ServerCustomId", "Steam", "Twitch", "Username", "Xbox", and
     "GooglePlayGames".
    :vartype identity_provider: str or ~playfab.models.PlayerIdentityProvider
    :ivar identity_provider_issued_id: The unique identifier of the player identity, as assigned by
     the player
     identity provider. The format varies by identity provider.
    :vartype identity_provider_issued_id: str
    """

    identity_link_id: Optional[str] = rest_field(name="IdentityLinkId")
    """Unique identifier of the link between the player identity and
master_player_account.Can be used to specify the link in requests to
UnlinkPlayerIdentity. """
    identity_provider: Union[str, "_models.PlayerIdentityProvider"] = rest_field(name="IdentityProvider")
    """The player identity provider in which the identity exists. Required. Known values are: \"AndroidDevice\", \"Apple\", \"CustomId\", \"Email\", \"FacebookInstantGames\", \"GameCenter\", \"Google\", \"iOSDevice\", \"Kongregate\", \"NintendoSwitchDevice\", \"NintendoAccount\", \"OpenId\", \"PSN\", \"ServerCustomId\", \"Steam\", \"Twitch\", \"Username\", \"Xbox\", and \"GooglePlayGames\"."""
    identity_provider_issued_id: Optional[str] = rest_field(name="IdentityProviderIssuedId")
    """The unique identifier of the player identity, as assigned by the player
identity provider. The format varies by identity provider. """

    @overload
    def __init__(
        self,
        *,
        identity_provider: Union[str, "_models.PlayerIdentityProvider"],
        identity_link_id: Optional[str] = None,
        identity_provider_issued_id: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class LoginPlayerRequest(_model_base.Model):
    """LoginPlayerRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar custom_tags: The optional custom tags associated with the request (e.g. build number,
     external trace identifiers, etc.).
    :vartype custom_tags: ~playfab.models.object
    :ivar title_id: Unique identifier for the title, found in the Settings > Game Properties
     section of the PlayFab developer site when a title has been selected. Required.
    :vartype title_id: str
    """

    custom_tags: Optional["_models.object"] = rest_field(name="CustomTags")
    """The optional custom tags associated with the request (e.g. build number,
external trace identifiers, etc.). """
    title_id: str = rest_field(name="TitleId")
    """Unique identifier for the title, found in the Settings > Game Properties
section of the PlayFab developer site when a title has been selected. Required. """

    @overload
    def __init__(
        self,
        *,
        title_id: str,
        custom_tags: Optional["_models.object"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class LoginPlayerResult(_model_base.Model):
    """LoginPlayerResult.

    :ivar code: The HTTP status code. If X-ReportErrorAsSuccess header is set to true, the
     service will return 200 and this will report the actual HTTP status code.
    :vartype code: int
    :ivar status: The HTTP status code as a string.
    :vartype status: str
    :ivar data:
    :vartype data: ~playfab.models.LoginPlayerResult_data
    """

    code: Optional[int] = rest_field()
    """The HTTP status code. If X-ReportErrorAsSuccess header is set to true, the
service will return 200 and this will report the actual HTTP status code. """
    status: Optional[str] = rest_field()
    """The HTTP status code as a string. """
    data: Optional["_models.LoginPlayerResult_data"] = rest_field()

    @overload
    def __init__(
        self,
        *,
        code: Optional[int] = None,
        status: Optional[str] = None,
        data: Optional["_models.LoginPlayerResult_data"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class LoginPlayerResult_data(_model_base.Model):
    """LoginPlayerResult_data.

    :ivar title_player_account_entity_token: Entity token for the title_player_account entity
     associated with the
     master_player_account and title.
    :vartype title_player_account_entity_token: ~playfab.models.EntityTokenResponse
    """

    title_player_account_entity_token: Optional["_models.EntityTokenResponse"] = rest_field(
        name="TitlePlayerAccountEntityToken"
    )
    """Entity token for the title_player_account entity associated with the
master_player_account and title. """

    @overload
    def __init__(
        self,
        *,
        title_player_account_entity_token: Optional["_models.EntityTokenResponse"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class object(_model_base.Model):
    """object."""


class ObjectResult(_model_base.Model):
    """ObjectResult.

    :ivar data_object: Un-escaped JSON object, if EscapeObject false or default.
    :vartype data_object: ~playfab.models.object
    :ivar escaped_data_object: Escaped string JSON body of the object, if EscapeObject is true.
    :vartype escaped_data_object: str
    :ivar object_name: Name of the object. Restricted to a-Z, 0-9, '(', ')', '_', '-' and '.'.
    :vartype object_name: str
    """

    data_object: Optional["_models.object"] = rest_field(name="DataObject")
    """Un-escaped JSON object, if EscapeObject false or default. """
    escaped_data_object: Optional[str] = rest_field(name="EscapedDataObject")
    """Escaped string JSON body of the object, if EscapeObject is true. """
    object_name: Optional[str] = rest_field(name="ObjectName")
    """Name of the object. Restricted to a-Z, 0-9, '(', ')', '_', '-' and '.'. """

    @overload
    def __init__(
        self,
        *,
        data_object: Optional["_models.object"] = None,
        escaped_data_object: Optional[str] = None,
        object_name: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SetObject(_model_base.Model):
    """SetObject.

    All required parameters must be populated in order to send to Azure.

    :ivar data_object: Body of the object to be saved. If empty and DeleteObject is true object
     will
     be deleted if it exists, or no operation will occur if it does not exist. Only
     one of Object or EscapedDataObject fields may be used.
    :vartype data_object: ~playfab.models.object
    :ivar delete_object: Flag to indicate that this object should be deleted. Both DataObject and
     EscapedDataObject must not be set as well.
    :vartype delete_object: bool
    :ivar escaped_data_object: Body of the object to be saved as an escaped JSON string. If empty
     and
     DeleteObject is true object will be deleted if it exists, or no operation will
     occur if it does not exist. Only one of DataObject or EscapedDataObject fields
     may be used.
    :vartype escaped_data_object: str
    :ivar object_name: Name of object. Restricted to a-Z, 0-9, '(', ')', '_', '-' and '.'.
     Required.
    :vartype object_name: str
    """

    data_object: Optional["_models.object"] = rest_field(name="DataObject")
    """Body of the object to be saved. If empty and DeleteObject is true object will
be deleted if it exists, or no operation will occur if it does not exist. Only
one of Object or EscapedDataObject fields may be used. """
    delete_object: Optional[bool] = rest_field(name="DeleteObject")
    """Flag to indicate that this object should be deleted. Both DataObject and
EscapedDataObject must not be set as well. """
    escaped_data_object: Optional[str] = rest_field(name="EscapedDataObject")
    """Body of the object to be saved as an escaped JSON string. If empty and
DeleteObject is true object will be deleted if it exists, or no operation will
occur if it does not exist. Only one of DataObject or EscapedDataObject fields
may be used. """
    object_name: str = rest_field(name="ObjectName")
    """Name of object. Restricted to a-Z, 0-9, '(', ')', '_', '-' and '.'. Required. """

    @overload
    def __init__(
        self,
        *,
        object_name: str,
        data_object: Optional["_models.object"] = None,
        delete_object: Optional[bool] = None,
        escaped_data_object: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SetObjectInfo(_model_base.Model):
    """SetObjectInfo.

    :ivar object_name: Name of the object.
    :vartype object_name: str
    :ivar operation_reason: Optional reason to explain why the operation was the result that it
     was.
    :vartype operation_reason: str
    :ivar set_result: Indicates which operation was completed, either Created, Updated, Deleted or
     None. Known values are: "Created", "Updated", "Deleted", and "None".
    :vartype set_result: str or ~playfab.models.OperationTypes
    """

    object_name: Optional[str] = rest_field(name="ObjectName")
    """Name of the object. """
    operation_reason: Optional[str] = rest_field(name="OperationReason")
    """Optional reason to explain why the operation was the result that it was. """
    set_result: Optional[Union[str, "_models.OperationTypes"]] = rest_field(name="SetResult")
    """Indicates which operation was completed, either Created, Updated, Deleted or
None. Known values are: \"Created\", \"Updated\", \"Deleted\", and \"None\"."""

    @overload
    def __init__(
        self,
        *,
        object_name: Optional[str] = None,
        operation_reason: Optional[str] = None,
        set_result: Optional[Union[str, "_models.OperationTypes"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SetObjectsRequest(_model_base.Model):
    """Sets JSON objects on the requested entity profile. May include a version number
    to be used to perform optimistic concurrency operations during update. If the
    current version differs from the version in the request the request will be
    ignored. If no version is set on the request then the value will always be
    updated if the values differ. Using the version value does not guarantee a
    write though, ConcurrentEditError may still occur if multiple clients are
    attempting to update the same profile.

    All required parameters must be populated in order to send to Azure.

    :ivar custom_tags: The optional custom tags associated with the request (e.g. build number,
     external trace identifiers, etc.).
    :vartype custom_tags: ~playfab.models.object
    :ivar entity: The entity to perform this action on. Required.
    :vartype entity: ~playfab.models.EntityKey
    :ivar expected_profile_version: Optional field used for concurrency control. By specifying the
     previously
     returned value of ProfileVersion from GetProfile API, you can ensure that the
     object set will only be performed if the profile has not been updated by any
     other clients since the version you last loaded.
    :vartype expected_profile_version: float
    :ivar objects: Collection of objects to set on the profile. Required.
    :vartype objects: list[~playfab.models.SetObject]
    """

    custom_tags: Optional["_models.object"] = rest_field(name="CustomTags")
    """The optional custom tags associated with the request (e.g. build number,
external trace identifiers, etc.). """
    entity: "_models.EntityKey" = rest_field(name="Entity")
    """The entity to perform this action on. Required. """
    expected_profile_version: Optional[float] = rest_field(name="ExpectedProfileVersion")
    """Optional field used for concurrency control. By specifying the previously
returned value of ProfileVersion from GetProfile API, you can ensure that the
object set will only be performed if the profile has not been updated by any
other clients since the version you last loaded. """
    objects: List["_models.SetObject"] = rest_field(name="Objects")
    """Collection of objects to set on the profile. Required. """

    @overload
    def __init__(
        self,
        *,
        entity: "_models.EntityKey",
        objects: List["_models.SetObject"],
        custom_tags: Optional["_models.object"] = None,
        expected_profile_version: Optional[float] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SetObjectsResponse(_model_base.Model):
    """SetObjectsResponse.

    :ivar code: The HTTP status code. If X-ReportErrorAsSuccess header is set to true, the
     service will return 200 and this will report the actual HTTP status code.
    :vartype code: int
    :ivar status: The HTTP status code as a string.
    :vartype status: str
    :ivar data:
    :vartype data: ~playfab.models.SetObjectsResponse_data
    """

    code: Optional[int] = rest_field()
    """The HTTP status code. If X-ReportErrorAsSuccess header is set to true, the
service will return 200 and this will report the actual HTTP status code. """
    status: Optional[str] = rest_field()
    """The HTTP status code as a string. """
    data: Optional["_models.SetObjectsResponse_data"] = rest_field()

    @overload
    def __init__(
        self,
        *,
        code: Optional[int] = None,
        status: Optional[str] = None,
        data: Optional["_models.SetObjectsResponse_data"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SetObjectsResponse_data(_model_base.Model):
    """SetObjectsResponse_data.

    :ivar profile_version: New version of the entity profile.
    :vartype profile_version: float
    :ivar set_results: New version of the entity profile.
    :vartype set_results: list[~playfab.models.SetObjectInfo]
    """

    profile_version: Optional[float] = rest_field(name="ProfileVersion")
    """New version of the entity profile. """
    set_results: Optional[List["_models.SetObjectInfo"]] = rest_field(name="SetResults")
    """New version of the entity profile. """

    @overload
    def __init__(
        self,
        *,
        profile_version: Optional[float] = None,
        set_results: Optional[List["_models.SetObjectInfo"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class UnlinkPlayerIdentityRequest(_model_base.Model):
    """UnlinkPlayerIdentityRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar custom_tags: The optional custom tags associated with the request (e.g. build number,
     external trace identifiers, etc.).
    :vartype custom_tags: ~playfab.models.object
    :ivar identity_link_id: Unique identifier of the link between the player identity and
     master_player_account to be unlinked. If no matching player identity is
     currently linked to the master_player_account, then the 'AccountNotLinked'
     error is returned. Required.
    :vartype identity_link_id: str
    :ivar master_player_account_id: master_player_account entity.
    :vartype master_player_account_id: str
    """

    custom_tags: Optional["_models.object"] = rest_field(name="CustomTags")
    """The optional custom tags associated with the request (e.g. build number,
external trace identifiers, etc.). """
    identity_link_id: str = rest_field(name="IdentityLinkId")
    """Unique identifier of the link between the player identity and
master_player_account to be unlinked. If no matching player identity is
currently linked to the master_player_account, then the 'AccountNotLinked'
error is returned. Required. """
    master_player_account_id: Optional[str] = rest_field(name="MasterPlayerAccountId")
    """master_player_account entity. """

    @overload
    def __init__(
        self,
        *,
        identity_link_id: str,
        custom_tags: Optional["_models.object"] = None,
        master_player_account_id: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class UnlinkPlayerIdentityResult(_model_base.Model):
    """UnlinkPlayerIdentityResult.

    :ivar code: The HTTP status code. If X-ReportErrorAsSuccess header is set to true, the
     service will return 200 and this will report the actual HTTP status code.
    :vartype code: int
    :ivar status: The HTTP status code as a string.
    :vartype status: str
    :ivar data: Any object.
    :vartype data: ~playfab.models.object
    """

    code: Optional[int] = rest_field()
    """The HTTP status code. If X-ReportErrorAsSuccess header is set to true, the
service will return 200 and this will report the actual HTTP status code. """
    status: Optional[str] = rest_field()
    """The HTTP status code as a string. """
    data: Optional["_models.object"] = rest_field()
    """Any object. """

    @overload
    def __init__(
        self,
        *,
        code: Optional[int] = None,
        status: Optional[str] = None,
        data: Optional["_models.object"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class WriteEventsRequest(_model_base.Model):
    """WriteEventsRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar custom_tags: The optional custom tags associated with the request (e.g. build number,
     external trace identifiers, etc.).
    :vartype custom_tags: ~playfab.models.object
    :ivar events: Collection of events to write to PlayStream. Required.
    :vartype events: list[~playfab.models.EventContents]
    """

    custom_tags: Optional["_models.object"] = rest_field(name="CustomTags")
    """The optional custom tags associated with the request (e.g. build number,
external trace identifiers, etc.). """
    events: List["_models.EventContents"] = rest_field(name="Events")
    """Collection of events to write to PlayStream. Required. """

    @overload
    def __init__(
        self,
        *,
        events: List["_models.EventContents"],
        custom_tags: Optional["_models.object"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class WriteEventsResponse(_model_base.Model):
    """WriteEventsResponse.

    :ivar code: The HTTP status code. If X-ReportErrorAsSuccess header is set to true, the
     service will return 200 and this will report the actual HTTP status code.
    :vartype code: int
    :ivar status: The HTTP status code as a string.
    :vartype status: str
    :ivar data:
    :vartype data: ~playfab.models.WriteEventsResponse_data
    """

    code: Optional[int] = rest_field()
    """The HTTP status code. If X-ReportErrorAsSuccess header is set to true, the
service will return 200 and this will report the actual HTTP status code. """
    status: Optional[str] = rest_field()
    """The HTTP status code as a string. """
    data: Optional["_models.WriteEventsResponse_data"] = rest_field()

    @overload
    def __init__(
        self,
        *,
        code: Optional[int] = None,
        status: Optional[str] = None,
        data: Optional["_models.WriteEventsResponse_data"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class WriteEventsResponse_data(_model_base.Model):
    """WriteEventsResponse_data.

    :ivar assigned_event_ids: The unique identifiers assigned by the server to the events, in the
     same order
     as the events in the request. Only returned if FlushToPlayStream option is
     true.
    :vartype assigned_event_ids: list[str]
    """

    assigned_event_ids: Optional[List[str]] = rest_field(name="AssignedEventIds")
    """The unique identifiers assigned by the server to the events, in the same order
as the events in the request. Only returned if FlushToPlayStream option is
true. """

    @overload
    def __init__(
        self,
        *,
        assigned_event_ids: Optional[List[str]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)
