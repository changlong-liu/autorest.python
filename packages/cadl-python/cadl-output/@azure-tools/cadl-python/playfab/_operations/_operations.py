# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import json
import sys
from typing import Any, Callable, Dict, IO, Optional, TypeVar, Union, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .. import models as _models
from .._model_base import AzureJSONEncoder, _deserialize
from .._serialization import Serializer
from .._vendor import PlayFabClientMixinABC

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
if sys.version_info >= (3, 8):
    from typing import Literal  # pylint: disable=no-name-in-module, ungrouped-imports
else:
    from typing_extensions import Literal  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_play_fab_get_entity_token_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept: Literal["application/json"] = kwargs.pop("accept", _headers.pop("accept", "application/json"))
    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    # Construct URL
    _url = "/Authentication/GetEntityToken"

    # Construct headers
    _headers["accept"] = _SERIALIZER.header("accept", accept, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_play_fab_authenticate_with_android_device_id_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept: Literal["application/json"] = kwargs.pop("accept", _headers.pop("accept", "application/json"))
    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    # Construct URL
    _url = "/PlayerIdentity/AuthenticateWithAndroidDeviceId"

    # Construct headers
    _headers["accept"] = _SERIALIZER.header("accept", accept, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_play_fab_authenticate_with_custom_id_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept: Literal["application/json"] = kwargs.pop("accept", _headers.pop("accept", "application/json"))
    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    # Construct URL
    _url = "/PlayerIdentity/AuthenticateWithCustomId"

    # Construct headers
    _headers["accept"] = _SERIALIZER.header("accept", accept, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_play_fab_authenticate_with_i_o_s_device_id_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept: Literal["application/json"] = kwargs.pop("accept", _headers.pop("accept", "application/json"))
    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    # Construct URL
    _url = "/PlayerIdentity/AuthenticateWithIOSDeviceId"

    # Construct headers
    _headers["accept"] = _SERIALIZER.header("accept", accept, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_play_fab_authenticate_with_nintendo_switch_device_i_d_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept: Literal["application/json"] = kwargs.pop("accept", _headers.pop("accept", "application/json"))
    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    # Construct URL
    _url = "/PlayerIdentity/AuthenticateWithNintendoSwitchDeviceID"

    # Construct headers
    _headers["accept"] = _SERIALIZER.header("accept", accept, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_play_fab_get_linked_player_identities_request(*, x__entity_token: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept: Literal["application/json"] = kwargs.pop("accept", _headers.pop("accept", "application/json"))
    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    # Construct URL
    _url = "/PlayerIdentity/GetLinkedPlayerIdentities"

    # Construct headers
    _headers["x-entity-token"] = _SERIALIZER.header("x__entity_token", x__entity_token, "str")
    _headers["accept"] = _SERIALIZER.header("accept", accept, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_play_fab_unlink_player_identity_request(*, x__entity_token: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept: Literal["application/json"] = kwargs.pop("accept", _headers.pop("accept", "application/json"))
    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    # Construct URL
    _url = "/PlayerIdentity/UnlinkPlayerIdentity"

    # Construct headers
    _headers["x-entity-token"] = _SERIALIZER.header("x__entity_token", x__entity_token, "str")
    _headers["accept"] = _SERIALIZER.header("accept", accept, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_play_fab_abort_file_uploads_request(*, x__entity_token: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept: Literal["application/json"] = kwargs.pop("accept", _headers.pop("accept", "application/json"))
    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    # Construct URL
    _url = "/File/AbortFileUploads"

    # Construct headers
    _headers["x-entity-token"] = _SERIALIZER.header("x__entity_token", x__entity_token, "str")
    _headers["accept"] = _SERIALIZER.header("accept", accept, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_play_fab_delete_files_request(*, x__entity_token: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept: Literal["application/json"] = kwargs.pop("accept", _headers.pop("accept", "application/json"))
    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    # Construct URL
    _url = "/File/DeleteFiles"

    # Construct headers
    _headers["x-entity-token"] = _SERIALIZER.header("x__entity_token", x__entity_token, "str")
    _headers["accept"] = _SERIALIZER.header("accept", accept, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_play_fab_finalize_file_uploads_request(*, x__entity_token: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept: Literal["application/json"] = kwargs.pop("accept", _headers.pop("accept", "application/json"))
    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    # Construct URL
    _url = "/File/FinalizeFileUploads"

    # Construct headers
    _headers["x-entity-token"] = _SERIALIZER.header("x__entity_token", x__entity_token, "str")
    _headers["accept"] = _SERIALIZER.header("accept", accept, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_play_fab_get_files_request(*, x__entity_token: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept: Literal["application/json"] = kwargs.pop("accept", _headers.pop("accept", "application/json"))
    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    # Construct URL
    _url = "/File/GetFiles"

    # Construct headers
    _headers["x-entity-token"] = _SERIALIZER.header("x__entity_token", x__entity_token, "str")
    _headers["accept"] = _SERIALIZER.header("accept", accept, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_play_fab_initiate_file_uploads_request(*, x__entity_token: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept: Literal["application/json"] = kwargs.pop("accept", _headers.pop("accept", "application/json"))
    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    # Construct URL
    _url = "/File/InitiateFileUploads"

    # Construct headers
    _headers["x-entity-token"] = _SERIALIZER.header("x__entity_token", x__entity_token, "str")
    _headers["accept"] = _SERIALIZER.header("accept", accept, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_play_fab_get_objects_request(*, x__entity_token: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept: Literal["application/json"] = kwargs.pop("accept", _headers.pop("accept", "application/json"))
    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    # Construct URL
    _url = "/Object/GetObjects"

    # Construct headers
    _headers["x-entity-token"] = _SERIALIZER.header("x__entity_token", x__entity_token, "str")
    _headers["accept"] = _SERIALIZER.header("accept", accept, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_play_fab_set_objects_request(*, x__entity_token: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept: Literal["application/json"] = kwargs.pop("accept", _headers.pop("accept", "application/json"))
    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    # Construct URL
    _url = "/Object/SetObjects"

    # Construct headers
    _headers["x-entity-token"] = _SERIALIZER.header("x__entity_token", x__entity_token, "str")
    _headers["accept"] = _SERIALIZER.header("accept", accept, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_play_fab_write_events_request(*, x__entity_token: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept: Literal["application/json"] = kwargs.pop("accept", _headers.pop("accept", "application/json"))
    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    # Construct URL
    _url = "/Event/WriteEvents"

    # Construct headers
    _headers["x-entity-token"] = _SERIALIZER.header("x__entity_token", x__entity_token, "str")
    _headers["accept"] = _SERIALIZER.header("accept", accept, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_play_fab_login_player_request(*, x__entity_token: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept: Literal["application/json"] = kwargs.pop("accept", _headers.pop("accept", "application/json"))
    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    # Construct URL
    _url = "/TitlePlayer/LoginPlayer"

    # Construct headers
    _headers["x-entity-token"] = _SERIALIZER.header("x__entity_token", x__entity_token, "str")
    _headers["accept"] = _SERIALIZER.header("accept", accept, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


class PlayFabClientOperationsMixin(PlayFabClientMixinABC):
    @overload
    def get_entity_token(
        self,
        get_entity_token_request: _models.GetEntityTokenRequest,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.GetEntityTokenResponse:
        """This feature is in private preview with a set of managed partners. Method to
        exchange a legacy AuthenticationTicket or title SecretKey for an Entity Token
        or to refresh a still valid Entity Token.

        :param get_entity_token_request: This API must be called with X-SecretKey, X-Authentication or
         X-EntityToken
         headers. An optional EntityKey may be included to attempt to set the resulting
         EntityToken to a specific entity, however the entity must be a relation of the
         caller, such as the master_player_account of a character. If sending
         X-EntityToken the account will be marked as freshly logged in and will issue a
         new token. If using X-Authentication or X-EntityToken the header must still be
         valid and cannot be expired or revoked. Required.
        :type get_entity_token_request: ~playfab.models.GetEntityTokenRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: GetEntityTokenResponse. The GetEntityTokenResponse is compatible with MutableMapping
        :rtype: ~playfab.models.GetEntityTokenResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def get_entity_token(
        self, get_entity_token_request: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.GetEntityTokenResponse:
        """This feature is in private preview with a set of managed partners. Method to
        exchange a legacy AuthenticationTicket or title SecretKey for an Entity Token
        or to refresh a still valid Entity Token.

        :param get_entity_token_request: This API must be called with X-SecretKey, X-Authentication or
         X-EntityToken
         headers. An optional EntityKey may be included to attempt to set the resulting
         EntityToken to a specific entity, however the entity must be a relation of the
         caller, such as the master_player_account of a character. If sending
         X-EntityToken the account will be marked as freshly logged in and will issue a
         new token. If using X-Authentication or X-EntityToken the header must still be
         valid and cannot be expired or revoked. Required.
        :type get_entity_token_request: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: GetEntityTokenResponse. The GetEntityTokenResponse is compatible with MutableMapping
        :rtype: ~playfab.models.GetEntityTokenResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def get_entity_token(
        self, get_entity_token_request: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.GetEntityTokenResponse:
        """This feature is in private preview with a set of managed partners. Method to
        exchange a legacy AuthenticationTicket or title SecretKey for an Entity Token
        or to refresh a still valid Entity Token.

        :param get_entity_token_request: This API must be called with X-SecretKey, X-Authentication or
         X-EntityToken
         headers. An optional EntityKey may be included to attempt to set the resulting
         EntityToken to a specific entity, however the entity must be a relation of the
         caller, such as the master_player_account of a character. If sending
         X-EntityToken the account will be marked as freshly logged in and will issue a
         new token. If using X-Authentication or X-EntityToken the header must still be
         valid and cannot be expired or revoked. Required.
        :type get_entity_token_request: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: GetEntityTokenResponse. The GetEntityTokenResponse is compatible with MutableMapping
        :rtype: ~playfab.models.GetEntityTokenResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def get_entity_token(
        self, get_entity_token_request: Union[_models.GetEntityTokenRequest, JSON, IO], **kwargs: Any
    ) -> _models.GetEntityTokenResponse:
        """This feature is in private preview with a set of managed partners. Method to
        exchange a legacy AuthenticationTicket or title SecretKey for an Entity Token
        or to refresh a still valid Entity Token.

        :param get_entity_token_request: This API must be called with X-SecretKey, X-Authentication or
         X-EntityToken
         headers. An optional EntityKey may be included to attempt to set the resulting
         EntityToken to a specific entity, however the entity must be a relation of the
         caller, such as the master_player_account of a character. If sending
         X-EntityToken the account will be marked as freshly logged in and will issue a
         new token. If using X-Authentication or X-EntityToken the header must still be
         valid and cannot be expired or revoked. Is one of the following types: model, JSON, IO
         Required.
        :type get_entity_token_request: ~playfab.models.GetEntityTokenRequest or JSON or IO
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :return: GetEntityTokenResponse. The GetEntityTokenResponse is compatible with MutableMapping
        :rtype: ~playfab.models.GetEntityTokenResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        accept: Literal["application/json"] = kwargs.pop("accept", _headers.pop("accept", "application/json"))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.GetEntityTokenResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(get_entity_token_request, (IO, bytes)):
            _content = get_entity_token_request
        else:
            _content = json.dumps(get_entity_token_request, cls=AzureJSONEncoder)  # type: ignore

        request = build_play_fab_get_entity_token_request(
            accept=accept,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ApiErrorWrapper, response.json())
            raise HttpResponseError(response=response, model=error)

        deserialized = _deserialize(_models.GetEntityTokenResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    def authenticate_with_android_device_id(
        self,
        authenticate_android_device_id_identity_request: _models.AuthenticateAndroidDeviceIdIdentityRequest,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.AuthenticateIdentityResult:
        """This feature is in private preview with a set of managed partners.
        Authenticates a player from the specified player account pool using the
        "Android Device ID" player identity provider, finds or provisions a
        master_player_account associated with the player identity, and returns an
        entity token for it. Optionally logs the authenticated player into the
        specified title and returns an additional entity token for the
        title_player_account.

        :param authenticate_android_device_id_identity_request: Required.
        :type authenticate_android_device_id_identity_request:
         ~playfab.models.AuthenticateAndroidDeviceIdIdentityRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: AuthenticateIdentityResult. The AuthenticateIdentityResult is compatible with
         MutableMapping
        :rtype: ~playfab.models.AuthenticateIdentityResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def authenticate_with_android_device_id(
        self,
        authenticate_android_device_id_identity_request: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.AuthenticateIdentityResult:
        """This feature is in private preview with a set of managed partners.
        Authenticates a player from the specified player account pool using the
        "Android Device ID" player identity provider, finds or provisions a
        master_player_account associated with the player identity, and returns an
        entity token for it. Optionally logs the authenticated player into the
        specified title and returns an additional entity token for the
        title_player_account.

        :param authenticate_android_device_id_identity_request: Required.
        :type authenticate_android_device_id_identity_request: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: AuthenticateIdentityResult. The AuthenticateIdentityResult is compatible with
         MutableMapping
        :rtype: ~playfab.models.AuthenticateIdentityResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def authenticate_with_android_device_id(
        self,
        authenticate_android_device_id_identity_request: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.AuthenticateIdentityResult:
        """This feature is in private preview with a set of managed partners.
        Authenticates a player from the specified player account pool using the
        "Android Device ID" player identity provider, finds or provisions a
        master_player_account associated with the player identity, and returns an
        entity token for it. Optionally logs the authenticated player into the
        specified title and returns an additional entity token for the
        title_player_account.

        :param authenticate_android_device_id_identity_request: Required.
        :type authenticate_android_device_id_identity_request: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: AuthenticateIdentityResult. The AuthenticateIdentityResult is compatible with
         MutableMapping
        :rtype: ~playfab.models.AuthenticateIdentityResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def authenticate_with_android_device_id(
        self,
        authenticate_android_device_id_identity_request: Union[
            _models.AuthenticateAndroidDeviceIdIdentityRequest, JSON, IO
        ],
        **kwargs: Any
    ) -> _models.AuthenticateIdentityResult:
        """This feature is in private preview with a set of managed partners.
        Authenticates a player from the specified player account pool using the
        "Android Device ID" player identity provider, finds or provisions a
        master_player_account associated with the player identity, and returns an
        entity token for it. Optionally logs the authenticated player into the
        specified title and returns an additional entity token for the
        title_player_account.

        :param authenticate_android_device_id_identity_request: Is one of the following types: model,
         JSON, IO Required.
        :type authenticate_android_device_id_identity_request:
         ~playfab.models.AuthenticateAndroidDeviceIdIdentityRequest or JSON or IO
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :return: AuthenticateIdentityResult. The AuthenticateIdentityResult is compatible with
         MutableMapping
        :rtype: ~playfab.models.AuthenticateIdentityResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        accept: Literal["application/json"] = kwargs.pop("accept", _headers.pop("accept", "application/json"))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.AuthenticateIdentityResult] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(authenticate_android_device_id_identity_request, (IO, bytes)):
            _content = authenticate_android_device_id_identity_request
        else:
            _content = json.dumps(authenticate_android_device_id_identity_request, cls=AzureJSONEncoder)  # type: ignore

        request = build_play_fab_authenticate_with_android_device_id_request(
            accept=accept,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ApiErrorWrapper, response.json())
            raise HttpResponseError(response=response, model=error)

        deserialized = _deserialize(_models.AuthenticateIdentityResult, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    def authenticate_with_custom_id(
        self,
        authenticate_custom_id_identity_request: _models.AuthenticateCustomIdIdentityRequest,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.AuthenticateIdentityResult:
        """This feature is in private preview with a set of managed partners.
        Authenticates a player from the specified player account pool using the
        "Custom ID" player identity provider, finds or provisions a
        master_player_account associated with the player identity, and returns an
        entity token for it. Optionally logs the authenticated player into the
        specified title and returns an additional entity token for the
        title_player_account.

        :param authenticate_custom_id_identity_request: Required.
        :type authenticate_custom_id_identity_request:
         ~playfab.models.AuthenticateCustomIdIdentityRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: AuthenticateIdentityResult. The AuthenticateIdentityResult is compatible with
         MutableMapping
        :rtype: ~playfab.models.AuthenticateIdentityResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def authenticate_with_custom_id(
        self, authenticate_custom_id_identity_request: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.AuthenticateIdentityResult:
        """This feature is in private preview with a set of managed partners.
        Authenticates a player from the specified player account pool using the
        "Custom ID" player identity provider, finds or provisions a
        master_player_account associated with the player identity, and returns an
        entity token for it. Optionally logs the authenticated player into the
        specified title and returns an additional entity token for the
        title_player_account.

        :param authenticate_custom_id_identity_request: Required.
        :type authenticate_custom_id_identity_request: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: AuthenticateIdentityResult. The AuthenticateIdentityResult is compatible with
         MutableMapping
        :rtype: ~playfab.models.AuthenticateIdentityResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def authenticate_with_custom_id(
        self, authenticate_custom_id_identity_request: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.AuthenticateIdentityResult:
        """This feature is in private preview with a set of managed partners.
        Authenticates a player from the specified player account pool using the
        "Custom ID" player identity provider, finds or provisions a
        master_player_account associated with the player identity, and returns an
        entity token for it. Optionally logs the authenticated player into the
        specified title and returns an additional entity token for the
        title_player_account.

        :param authenticate_custom_id_identity_request: Required.
        :type authenticate_custom_id_identity_request: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: AuthenticateIdentityResult. The AuthenticateIdentityResult is compatible with
         MutableMapping
        :rtype: ~playfab.models.AuthenticateIdentityResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def authenticate_with_custom_id(
        self,
        authenticate_custom_id_identity_request: Union[_models.AuthenticateCustomIdIdentityRequest, JSON, IO],
        **kwargs: Any
    ) -> _models.AuthenticateIdentityResult:
        """This feature is in private preview with a set of managed partners.
        Authenticates a player from the specified player account pool using the
        "Custom ID" player identity provider, finds or provisions a
        master_player_account associated with the player identity, and returns an
        entity token for it. Optionally logs the authenticated player into the
        specified title and returns an additional entity token for the
        title_player_account.

        :param authenticate_custom_id_identity_request: Is one of the following types: model, JSON, IO
         Required.
        :type authenticate_custom_id_identity_request:
         ~playfab.models.AuthenticateCustomIdIdentityRequest or JSON or IO
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :return: AuthenticateIdentityResult. The AuthenticateIdentityResult is compatible with
         MutableMapping
        :rtype: ~playfab.models.AuthenticateIdentityResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        accept: Literal["application/json"] = kwargs.pop("accept", _headers.pop("accept", "application/json"))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.AuthenticateIdentityResult] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(authenticate_custom_id_identity_request, (IO, bytes)):
            _content = authenticate_custom_id_identity_request
        else:
            _content = json.dumps(authenticate_custom_id_identity_request, cls=AzureJSONEncoder)  # type: ignore

        request = build_play_fab_authenticate_with_custom_id_request(
            accept=accept,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ApiErrorWrapper, response.json())
            raise HttpResponseError(response=response, model=error)

        deserialized = _deserialize(_models.AuthenticateIdentityResult, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    def authenticate_with_i_o_s_device_id(
        self,
        authenticate_i_o_s_device_id_identity_request: _models.AuthenticateIOSDeviceIdIdentityRequest,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.AuthenticateIdentityResult:
        """This feature is in private preview with a set of managed partners.
        Authenticates a player from the specified player account pool using the "IOS
        Device ID" player identity provider, finds or provisions a
        master_player_account associated with the player identity, and returns an
        entity token for it. Optionally logs the authenticated player into the
        specified title and returns an additional entity token for the
        title_player_account.

        :param authenticate_i_o_s_device_id_identity_request: Required.
        :type authenticate_i_o_s_device_id_identity_request:
         ~playfab.models.AuthenticateIOSDeviceIdIdentityRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: AuthenticateIdentityResult. The AuthenticateIdentityResult is compatible with
         MutableMapping
        :rtype: ~playfab.models.AuthenticateIdentityResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def authenticate_with_i_o_s_device_id(
        self,
        authenticate_i_o_s_device_id_identity_request: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.AuthenticateIdentityResult:
        """This feature is in private preview with a set of managed partners.
        Authenticates a player from the specified player account pool using the "IOS
        Device ID" player identity provider, finds or provisions a
        master_player_account associated with the player identity, and returns an
        entity token for it. Optionally logs the authenticated player into the
        specified title and returns an additional entity token for the
        title_player_account.

        :param authenticate_i_o_s_device_id_identity_request: Required.
        :type authenticate_i_o_s_device_id_identity_request: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: AuthenticateIdentityResult. The AuthenticateIdentityResult is compatible with
         MutableMapping
        :rtype: ~playfab.models.AuthenticateIdentityResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def authenticate_with_i_o_s_device_id(
        self,
        authenticate_i_o_s_device_id_identity_request: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.AuthenticateIdentityResult:
        """This feature is in private preview with a set of managed partners.
        Authenticates a player from the specified player account pool using the "IOS
        Device ID" player identity provider, finds or provisions a
        master_player_account associated with the player identity, and returns an
        entity token for it. Optionally logs the authenticated player into the
        specified title and returns an additional entity token for the
        title_player_account.

        :param authenticate_i_o_s_device_id_identity_request: Required.
        :type authenticate_i_o_s_device_id_identity_request: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: AuthenticateIdentityResult. The AuthenticateIdentityResult is compatible with
         MutableMapping
        :rtype: ~playfab.models.AuthenticateIdentityResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def authenticate_with_i_o_s_device_id(
        self,
        authenticate_i_o_s_device_id_identity_request: Union[_models.AuthenticateIOSDeviceIdIdentityRequest, JSON, IO],
        **kwargs: Any
    ) -> _models.AuthenticateIdentityResult:
        """This feature is in private preview with a set of managed partners.
        Authenticates a player from the specified player account pool using the "IOS
        Device ID" player identity provider, finds or provisions a
        master_player_account associated with the player identity, and returns an
        entity token for it. Optionally logs the authenticated player into the
        specified title and returns an additional entity token for the
        title_player_account.

        :param authenticate_i_o_s_device_id_identity_request: Is one of the following types: model,
         JSON, IO Required.
        :type authenticate_i_o_s_device_id_identity_request:
         ~playfab.models.AuthenticateIOSDeviceIdIdentityRequest or JSON or IO
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :return: AuthenticateIdentityResult. The AuthenticateIdentityResult is compatible with
         MutableMapping
        :rtype: ~playfab.models.AuthenticateIdentityResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        accept: Literal["application/json"] = kwargs.pop("accept", _headers.pop("accept", "application/json"))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.AuthenticateIdentityResult] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(authenticate_i_o_s_device_id_identity_request, (IO, bytes)):
            _content = authenticate_i_o_s_device_id_identity_request
        else:
            _content = json.dumps(authenticate_i_o_s_device_id_identity_request, cls=AzureJSONEncoder)  # type: ignore

        request = build_play_fab_authenticate_with_i_o_s_device_id_request(
            accept=accept,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ApiErrorWrapper, response.json())
            raise HttpResponseError(response=response, model=error)

        deserialized = _deserialize(_models.AuthenticateIdentityResult, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    def authenticate_with_nintendo_switch_device_i_d(
        self,
        authenticate_nintendo_switch_device_i_d_identity_request: _models.AuthenticateNintendoSwitchDeviceIDIdentityRequest,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.AuthenticateIdentityResult:
        """This feature is in private preview with a set of managed partners.
        Authenticates a player from the specified player account pool using the
        "Nintendo Switch Device ID" player identity provider, finds or provisions a
        master_player_account associated with the player identity, and returns an
        entity token for it. Optionally logs the authenticated player into the
        specified title and returns an additional entity token for the
        title_player_account.

        :param authenticate_nintendo_switch_device_i_d_identity_request: Required.
        :type authenticate_nintendo_switch_device_i_d_identity_request:
         ~playfab.models.AuthenticateNintendoSwitchDeviceIDIdentityRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: AuthenticateIdentityResult. The AuthenticateIdentityResult is compatible with
         MutableMapping
        :rtype: ~playfab.models.AuthenticateIdentityResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def authenticate_with_nintendo_switch_device_i_d(
        self,
        authenticate_nintendo_switch_device_i_d_identity_request: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.AuthenticateIdentityResult:
        """This feature is in private preview with a set of managed partners.
        Authenticates a player from the specified player account pool using the
        "Nintendo Switch Device ID" player identity provider, finds or provisions a
        master_player_account associated with the player identity, and returns an
        entity token for it. Optionally logs the authenticated player into the
        specified title and returns an additional entity token for the
        title_player_account.

        :param authenticate_nintendo_switch_device_i_d_identity_request: Required.
        :type authenticate_nintendo_switch_device_i_d_identity_request: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: AuthenticateIdentityResult. The AuthenticateIdentityResult is compatible with
         MutableMapping
        :rtype: ~playfab.models.AuthenticateIdentityResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def authenticate_with_nintendo_switch_device_i_d(
        self,
        authenticate_nintendo_switch_device_i_d_identity_request: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.AuthenticateIdentityResult:
        """This feature is in private preview with a set of managed partners.
        Authenticates a player from the specified player account pool using the
        "Nintendo Switch Device ID" player identity provider, finds or provisions a
        master_player_account associated with the player identity, and returns an
        entity token for it. Optionally logs the authenticated player into the
        specified title and returns an additional entity token for the
        title_player_account.

        :param authenticate_nintendo_switch_device_i_d_identity_request: Required.
        :type authenticate_nintendo_switch_device_i_d_identity_request: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: AuthenticateIdentityResult. The AuthenticateIdentityResult is compatible with
         MutableMapping
        :rtype: ~playfab.models.AuthenticateIdentityResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def authenticate_with_nintendo_switch_device_i_d(
        self,
        authenticate_nintendo_switch_device_i_d_identity_request: Union[
            _models.AuthenticateNintendoSwitchDeviceIDIdentityRequest, JSON, IO
        ],
        **kwargs: Any
    ) -> _models.AuthenticateIdentityResult:
        """This feature is in private preview with a set of managed partners.
        Authenticates a player from the specified player account pool using the
        "Nintendo Switch Device ID" player identity provider, finds or provisions a
        master_player_account associated with the player identity, and returns an
        entity token for it. Optionally logs the authenticated player into the
        specified title and returns an additional entity token for the
        title_player_account.

        :param authenticate_nintendo_switch_device_i_d_identity_request: Is one of the following types:
         model, JSON, IO Required.
        :type authenticate_nintendo_switch_device_i_d_identity_request:
         ~playfab.models.AuthenticateNintendoSwitchDeviceIDIdentityRequest or JSON or IO
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :return: AuthenticateIdentityResult. The AuthenticateIdentityResult is compatible with
         MutableMapping
        :rtype: ~playfab.models.AuthenticateIdentityResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        accept: Literal["application/json"] = kwargs.pop("accept", _headers.pop("accept", "application/json"))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.AuthenticateIdentityResult] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(authenticate_nintendo_switch_device_i_d_identity_request, (IO, bytes)):
            _content = authenticate_nintendo_switch_device_i_d_identity_request
        else:
            _content = json.dumps(authenticate_nintendo_switch_device_i_d_identity_request, cls=AzureJSONEncoder)  # type: ignore

        request = build_play_fab_authenticate_with_nintendo_switch_device_i_d_request(
            accept=accept,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ApiErrorWrapper, response.json())
            raise HttpResponseError(response=response, model=error)

        deserialized = _deserialize(_models.AuthenticateIdentityResult, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    def get_linked_player_identities(
        self,
        get_linked_player_identities_request: _models.GetLinkedPlayerIdentitiesRequest,
        *,
        x__entity_token: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.GetLinkedPlayerIdentitiesResult:
        """This feature is in private preview with a set of managed partners. Lists the
        player identities currently linked to a master_player_account.

        :param get_linked_player_identities_request: Required.
        :type get_linked_player_identities_request: ~playfab.models.GetLinkedPlayerIdentitiesRequest
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: GetLinkedPlayerIdentitiesResult. The GetLinkedPlayerIdentitiesResult is compatible
         with MutableMapping
        :rtype: ~playfab.models.GetLinkedPlayerIdentitiesResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def get_linked_player_identities(
        self,
        get_linked_player_identities_request: JSON,
        *,
        x__entity_token: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.GetLinkedPlayerIdentitiesResult:
        """This feature is in private preview with a set of managed partners. Lists the
        player identities currently linked to a master_player_account.

        :param get_linked_player_identities_request: Required.
        :type get_linked_player_identities_request: JSON
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: GetLinkedPlayerIdentitiesResult. The GetLinkedPlayerIdentitiesResult is compatible
         with MutableMapping
        :rtype: ~playfab.models.GetLinkedPlayerIdentitiesResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def get_linked_player_identities(
        self,
        get_linked_player_identities_request: IO,
        *,
        x__entity_token: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.GetLinkedPlayerIdentitiesResult:
        """This feature is in private preview with a set of managed partners. Lists the
        player identities currently linked to a master_player_account.

        :param get_linked_player_identities_request: Required.
        :type get_linked_player_identities_request: IO
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: GetLinkedPlayerIdentitiesResult. The GetLinkedPlayerIdentitiesResult is compatible
         with MutableMapping
        :rtype: ~playfab.models.GetLinkedPlayerIdentitiesResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def get_linked_player_identities(
        self,
        get_linked_player_identities_request: Union[_models.GetLinkedPlayerIdentitiesRequest, JSON, IO],
        *,
        x__entity_token: str,
        **kwargs: Any
    ) -> _models.GetLinkedPlayerIdentitiesResult:
        """This feature is in private preview with a set of managed partners. Lists the
        player identities currently linked to a master_player_account.

        :param get_linked_player_identities_request: Is one of the following types: model, JSON, IO
         Required.
        :type get_linked_player_identities_request: ~playfab.models.GetLinkedPlayerIdentitiesRequest or
         JSON or IO
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :return: GetLinkedPlayerIdentitiesResult. The GetLinkedPlayerIdentitiesResult is compatible
         with MutableMapping
        :rtype: ~playfab.models.GetLinkedPlayerIdentitiesResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        accept: Literal["application/json"] = kwargs.pop("accept", _headers.pop("accept", "application/json"))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.GetLinkedPlayerIdentitiesResult] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(get_linked_player_identities_request, (IO, bytes)):
            _content = get_linked_player_identities_request
        else:
            _content = json.dumps(get_linked_player_identities_request, cls=AzureJSONEncoder)  # type: ignore

        request = build_play_fab_get_linked_player_identities_request(
            x__entity_token=x__entity_token,
            accept=accept,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ApiErrorWrapper, response.json())
            raise HttpResponseError(response=response, model=error)

        deserialized = _deserialize(_models.GetLinkedPlayerIdentitiesResult, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    def unlink_player_identity(
        self,
        unlink_player_identity_request: _models.UnlinkPlayerIdentityRequest,
        *,
        x__entity_token: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.UnlinkPlayerIdentityResult:
        """This feature is in private preview with a set of managed partners. Removes the
        link from a player identity to a master_player_account.

        :param unlink_player_identity_request: Required.
        :type unlink_player_identity_request: ~playfab.models.UnlinkPlayerIdentityRequest
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: UnlinkPlayerIdentityResult. The UnlinkPlayerIdentityResult is compatible with
         MutableMapping
        :rtype: ~playfab.models.UnlinkPlayerIdentityResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def unlink_player_identity(
        self,
        unlink_player_identity_request: JSON,
        *,
        x__entity_token: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.UnlinkPlayerIdentityResult:
        """This feature is in private preview with a set of managed partners. Removes the
        link from a player identity to a master_player_account.

        :param unlink_player_identity_request: Required.
        :type unlink_player_identity_request: JSON
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: UnlinkPlayerIdentityResult. The UnlinkPlayerIdentityResult is compatible with
         MutableMapping
        :rtype: ~playfab.models.UnlinkPlayerIdentityResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def unlink_player_identity(
        self,
        unlink_player_identity_request: IO,
        *,
        x__entity_token: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.UnlinkPlayerIdentityResult:
        """This feature is in private preview with a set of managed partners. Removes the
        link from a player identity to a master_player_account.

        :param unlink_player_identity_request: Required.
        :type unlink_player_identity_request: IO
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: UnlinkPlayerIdentityResult. The UnlinkPlayerIdentityResult is compatible with
         MutableMapping
        :rtype: ~playfab.models.UnlinkPlayerIdentityResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def unlink_player_identity(
        self,
        unlink_player_identity_request: Union[_models.UnlinkPlayerIdentityRequest, JSON, IO],
        *,
        x__entity_token: str,
        **kwargs: Any
    ) -> _models.UnlinkPlayerIdentityResult:
        """This feature is in private preview with a set of managed partners. Removes the
        link from a player identity to a master_player_account.

        :param unlink_player_identity_request: Is one of the following types: model, JSON, IO Required.
        :type unlink_player_identity_request: ~playfab.models.UnlinkPlayerIdentityRequest or JSON or IO
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :return: UnlinkPlayerIdentityResult. The UnlinkPlayerIdentityResult is compatible with
         MutableMapping
        :rtype: ~playfab.models.UnlinkPlayerIdentityResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        accept: Literal["application/json"] = kwargs.pop("accept", _headers.pop("accept", "application/json"))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.UnlinkPlayerIdentityResult] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(unlink_player_identity_request, (IO, bytes)):
            _content = unlink_player_identity_request
        else:
            _content = json.dumps(unlink_player_identity_request, cls=AzureJSONEncoder)  # type: ignore

        request = build_play_fab_unlink_player_identity_request(
            x__entity_token=x__entity_token,
            accept=accept,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ApiErrorWrapper, response.json())
            raise HttpResponseError(response=response, model=error)

        deserialized = _deserialize(_models.UnlinkPlayerIdentityResult, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    def abort_file_uploads(
        self,
        abort_file_uploads_request: _models.AbortFileUploadsRequest,
        *,
        x__entity_token: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.AbortFileUploadsResponse:
        """This feature is in private preview with a set of managed partners. Abort
        pending file uploads to an entity's profile.

        :param abort_file_uploads_request: Aborts the pending upload of the requested files. Required.
        :type abort_file_uploads_request: ~playfab.models.AbortFileUploadsRequest
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: AbortFileUploadsResponse. The AbortFileUploadsResponse is compatible with
         MutableMapping
        :rtype: ~playfab.models.AbortFileUploadsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def abort_file_uploads(
        self,
        abort_file_uploads_request: JSON,
        *,
        x__entity_token: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.AbortFileUploadsResponse:
        """This feature is in private preview with a set of managed partners. Abort
        pending file uploads to an entity's profile.

        :param abort_file_uploads_request: Aborts the pending upload of the requested files. Required.
        :type abort_file_uploads_request: JSON
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: AbortFileUploadsResponse. The AbortFileUploadsResponse is compatible with
         MutableMapping
        :rtype: ~playfab.models.AbortFileUploadsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def abort_file_uploads(
        self,
        abort_file_uploads_request: IO,
        *,
        x__entity_token: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.AbortFileUploadsResponse:
        """This feature is in private preview with a set of managed partners. Abort
        pending file uploads to an entity's profile.

        :param abort_file_uploads_request: Aborts the pending upload of the requested files. Required.
        :type abort_file_uploads_request: IO
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: AbortFileUploadsResponse. The AbortFileUploadsResponse is compatible with
         MutableMapping
        :rtype: ~playfab.models.AbortFileUploadsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def abort_file_uploads(
        self,
        abort_file_uploads_request: Union[_models.AbortFileUploadsRequest, JSON, IO],
        *,
        x__entity_token: str,
        **kwargs: Any
    ) -> _models.AbortFileUploadsResponse:
        """This feature is in private preview with a set of managed partners. Abort
        pending file uploads to an entity's profile.

        :param abort_file_uploads_request: Aborts the pending upload of the requested files. Is one of
         the following types: model, JSON, IO Required.
        :type abort_file_uploads_request: ~playfab.models.AbortFileUploadsRequest or JSON or IO
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :return: AbortFileUploadsResponse. The AbortFileUploadsResponse is compatible with
         MutableMapping
        :rtype: ~playfab.models.AbortFileUploadsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        accept: Literal["application/json"] = kwargs.pop("accept", _headers.pop("accept", "application/json"))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.AbortFileUploadsResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(abort_file_uploads_request, (IO, bytes)):
            _content = abort_file_uploads_request
        else:
            _content = json.dumps(abort_file_uploads_request, cls=AzureJSONEncoder)  # type: ignore

        request = build_play_fab_abort_file_uploads_request(
            x__entity_token=x__entity_token,
            accept=accept,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ApiErrorWrapper, response.json())
            raise HttpResponseError(response=response, model=error)

        deserialized = _deserialize(_models.AbortFileUploadsResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    def delete_files(
        self,
        delete_files_request: _models.DeleteFilesRequest,
        *,
        x__entity_token: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.DeleteFilesResponse:
        """This feature is in private preview with a set of managed partners. Delete files
        on an entity's profile.

        :param delete_files_request: Deletes the requested files from the entity's profile. Required.
        :type delete_files_request: ~playfab.models.DeleteFilesRequest
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: DeleteFilesResponse. The DeleteFilesResponse is compatible with MutableMapping
        :rtype: ~playfab.models.DeleteFilesResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def delete_files(
        self, delete_files_request: JSON, *, x__entity_token: str, content_type: str = "application/json", **kwargs: Any
    ) -> _models.DeleteFilesResponse:
        """This feature is in private preview with a set of managed partners. Delete files
        on an entity's profile.

        :param delete_files_request: Deletes the requested files from the entity's profile. Required.
        :type delete_files_request: JSON
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: DeleteFilesResponse. The DeleteFilesResponse is compatible with MutableMapping
        :rtype: ~playfab.models.DeleteFilesResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def delete_files(
        self, delete_files_request: IO, *, x__entity_token: str, content_type: str = "application/json", **kwargs: Any
    ) -> _models.DeleteFilesResponse:
        """This feature is in private preview with a set of managed partners. Delete files
        on an entity's profile.

        :param delete_files_request: Deletes the requested files from the entity's profile. Required.
        :type delete_files_request: IO
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: DeleteFilesResponse. The DeleteFilesResponse is compatible with MutableMapping
        :rtype: ~playfab.models.DeleteFilesResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def delete_files(
        self, delete_files_request: Union[_models.DeleteFilesRequest, JSON, IO], *, x__entity_token: str, **kwargs: Any
    ) -> _models.DeleteFilesResponse:
        """This feature is in private preview with a set of managed partners. Delete files
        on an entity's profile.

        :param delete_files_request: Deletes the requested files from the entity's profile. Is one of
         the following types: model, JSON, IO Required.
        :type delete_files_request: ~playfab.models.DeleteFilesRequest or JSON or IO
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :return: DeleteFilesResponse. The DeleteFilesResponse is compatible with MutableMapping
        :rtype: ~playfab.models.DeleteFilesResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        accept: Literal["application/json"] = kwargs.pop("accept", _headers.pop("accept", "application/json"))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.DeleteFilesResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(delete_files_request, (IO, bytes)):
            _content = delete_files_request
        else:
            _content = json.dumps(delete_files_request, cls=AzureJSONEncoder)  # type: ignore

        request = build_play_fab_delete_files_request(
            x__entity_token=x__entity_token,
            accept=accept,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ApiErrorWrapper, response.json())
            raise HttpResponseError(response=response, model=error)

        deserialized = _deserialize(_models.DeleteFilesResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    def finalize_file_uploads(
        self,
        finalize_file_uploads_request: _models.FinalizeFileUploadsRequest,
        *,
        x__entity_token: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.FinalizeFileUploadsResponse:
        """This feature is in private preview with a set of managed partners. Finalize
        file uploads to an entity's profile.

        :param finalize_file_uploads_request: Finalizes the upload of the requested files. Verifies
         that the files have been
         successfully uploaded and moves the file pointers from pending to live. Required.
        :type finalize_file_uploads_request: ~playfab.models.FinalizeFileUploadsRequest
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: FinalizeFileUploadsResponse. The FinalizeFileUploadsResponse is compatible with
         MutableMapping
        :rtype: ~playfab.models.FinalizeFileUploadsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def finalize_file_uploads(
        self,
        finalize_file_uploads_request: JSON,
        *,
        x__entity_token: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.FinalizeFileUploadsResponse:
        """This feature is in private preview with a set of managed partners. Finalize
        file uploads to an entity's profile.

        :param finalize_file_uploads_request: Finalizes the upload of the requested files. Verifies
         that the files have been
         successfully uploaded and moves the file pointers from pending to live. Required.
        :type finalize_file_uploads_request: JSON
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: FinalizeFileUploadsResponse. The FinalizeFileUploadsResponse is compatible with
         MutableMapping
        :rtype: ~playfab.models.FinalizeFileUploadsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def finalize_file_uploads(
        self,
        finalize_file_uploads_request: IO,
        *,
        x__entity_token: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.FinalizeFileUploadsResponse:
        """This feature is in private preview with a set of managed partners. Finalize
        file uploads to an entity's profile.

        :param finalize_file_uploads_request: Finalizes the upload of the requested files. Verifies
         that the files have been
         successfully uploaded and moves the file pointers from pending to live. Required.
        :type finalize_file_uploads_request: IO
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: FinalizeFileUploadsResponse. The FinalizeFileUploadsResponse is compatible with
         MutableMapping
        :rtype: ~playfab.models.FinalizeFileUploadsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def finalize_file_uploads(
        self,
        finalize_file_uploads_request: Union[_models.FinalizeFileUploadsRequest, JSON, IO],
        *,
        x__entity_token: str,
        **kwargs: Any
    ) -> _models.FinalizeFileUploadsResponse:
        """This feature is in private preview with a set of managed partners. Finalize
        file uploads to an entity's profile.

        :param finalize_file_uploads_request: Finalizes the upload of the requested files. Verifies
         that the files have been
         successfully uploaded and moves the file pointers from pending to live. Is one of the
         following types: model, JSON, IO Required.
        :type finalize_file_uploads_request: ~playfab.models.FinalizeFileUploadsRequest or JSON or IO
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :return: FinalizeFileUploadsResponse. The FinalizeFileUploadsResponse is compatible with
         MutableMapping
        :rtype: ~playfab.models.FinalizeFileUploadsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        accept: Literal["application/json"] = kwargs.pop("accept", _headers.pop("accept", "application/json"))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.FinalizeFileUploadsResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(finalize_file_uploads_request, (IO, bytes)):
            _content = finalize_file_uploads_request
        else:
            _content = json.dumps(finalize_file_uploads_request, cls=AzureJSONEncoder)  # type: ignore

        request = build_play_fab_finalize_file_uploads_request(
            x__entity_token=x__entity_token,
            accept=accept,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ApiErrorWrapper, response.json())
            raise HttpResponseError(response=response, model=error)

        deserialized = _deserialize(_models.FinalizeFileUploadsResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    def get_files(
        self,
        get_files_request: _models.GetFilesRequest,
        *,
        x__entity_token: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.GetFilesResponse:
        """This feature is in private preview with a set of managed partners. Retrieves
        file metadata from an entity's profile.

        :param get_files_request: Returns URLs that may be used to download the files for a profile for
         a limited
         length of time. Only returns files that have been successfully uploaded, files
         that are still pending will either return the old value, if it exists, or
         nothing. Required.
        :type get_files_request: ~playfab.models.GetFilesRequest
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: GetFilesResponse. The GetFilesResponse is compatible with MutableMapping
        :rtype: ~playfab.models.GetFilesResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def get_files(
        self, get_files_request: JSON, *, x__entity_token: str, content_type: str = "application/json", **kwargs: Any
    ) -> _models.GetFilesResponse:
        """This feature is in private preview with a set of managed partners. Retrieves
        file metadata from an entity's profile.

        :param get_files_request: Returns URLs that may be used to download the files for a profile for
         a limited
         length of time. Only returns files that have been successfully uploaded, files
         that are still pending will either return the old value, if it exists, or
         nothing. Required.
        :type get_files_request: JSON
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: GetFilesResponse. The GetFilesResponse is compatible with MutableMapping
        :rtype: ~playfab.models.GetFilesResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def get_files(
        self, get_files_request: IO, *, x__entity_token: str, content_type: str = "application/json", **kwargs: Any
    ) -> _models.GetFilesResponse:
        """This feature is in private preview with a set of managed partners. Retrieves
        file metadata from an entity's profile.

        :param get_files_request: Returns URLs that may be used to download the files for a profile for
         a limited
         length of time. Only returns files that have been successfully uploaded, files
         that are still pending will either return the old value, if it exists, or
         nothing. Required.
        :type get_files_request: IO
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: GetFilesResponse. The GetFilesResponse is compatible with MutableMapping
        :rtype: ~playfab.models.GetFilesResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def get_files(
        self, get_files_request: Union[_models.GetFilesRequest, JSON, IO], *, x__entity_token: str, **kwargs: Any
    ) -> _models.GetFilesResponse:
        """This feature is in private preview with a set of managed partners. Retrieves
        file metadata from an entity's profile.

        :param get_files_request: Returns URLs that may be used to download the files for a profile for
         a limited
         length of time. Only returns files that have been successfully uploaded, files
         that are still pending will either return the old value, if it exists, or
         nothing. Is one of the following types: model, JSON, IO Required.
        :type get_files_request: ~playfab.models.GetFilesRequest or JSON or IO
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :return: GetFilesResponse. The GetFilesResponse is compatible with MutableMapping
        :rtype: ~playfab.models.GetFilesResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        accept: Literal["application/json"] = kwargs.pop("accept", _headers.pop("accept", "application/json"))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.GetFilesResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(get_files_request, (IO, bytes)):
            _content = get_files_request
        else:
            _content = json.dumps(get_files_request, cls=AzureJSONEncoder)  # type: ignore

        request = build_play_fab_get_files_request(
            x__entity_token=x__entity_token,
            accept=accept,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ApiErrorWrapper, response.json())
            raise HttpResponseError(response=response, model=error)

        deserialized = _deserialize(_models.GetFilesResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    def initiate_file_uploads(
        self,
        initiate_file_uploads_request: _models.InitiateFileUploadsRequest,
        *,
        x__entity_token: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.InitiateFileUploadsResponse:
        """This feature is in private preview with a set of managed partners. Initiates
        file uploads to an entity's profile.

        :param initiate_file_uploads_request: Returns URLs that may be used to upload the files for a
         profile 5 minutes.
         After using the upload calls FinalizeFileUploads must be called to move the
         file status from pending to live. Required.
        :type initiate_file_uploads_request: ~playfab.models.InitiateFileUploadsRequest
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: InitiateFileUploadsResponse. The InitiateFileUploadsResponse is compatible with
         MutableMapping
        :rtype: ~playfab.models.InitiateFileUploadsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def initiate_file_uploads(
        self,
        initiate_file_uploads_request: JSON,
        *,
        x__entity_token: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.InitiateFileUploadsResponse:
        """This feature is in private preview with a set of managed partners. Initiates
        file uploads to an entity's profile.

        :param initiate_file_uploads_request: Returns URLs that may be used to upload the files for a
         profile 5 minutes.
         After using the upload calls FinalizeFileUploads must be called to move the
         file status from pending to live. Required.
        :type initiate_file_uploads_request: JSON
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: InitiateFileUploadsResponse. The InitiateFileUploadsResponse is compatible with
         MutableMapping
        :rtype: ~playfab.models.InitiateFileUploadsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def initiate_file_uploads(
        self,
        initiate_file_uploads_request: IO,
        *,
        x__entity_token: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.InitiateFileUploadsResponse:
        """This feature is in private preview with a set of managed partners. Initiates
        file uploads to an entity's profile.

        :param initiate_file_uploads_request: Returns URLs that may be used to upload the files for a
         profile 5 minutes.
         After using the upload calls FinalizeFileUploads must be called to move the
         file status from pending to live. Required.
        :type initiate_file_uploads_request: IO
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: InitiateFileUploadsResponse. The InitiateFileUploadsResponse is compatible with
         MutableMapping
        :rtype: ~playfab.models.InitiateFileUploadsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def initiate_file_uploads(
        self,
        initiate_file_uploads_request: Union[_models.InitiateFileUploadsRequest, JSON, IO],
        *,
        x__entity_token: str,
        **kwargs: Any
    ) -> _models.InitiateFileUploadsResponse:
        """This feature is in private preview with a set of managed partners. Initiates
        file uploads to an entity's profile.

        :param initiate_file_uploads_request: Returns URLs that may be used to upload the files for a
         profile 5 minutes.
         After using the upload calls FinalizeFileUploads must be called to move the
         file status from pending to live. Is one of the following types: model, JSON, IO Required.
        :type initiate_file_uploads_request: ~playfab.models.InitiateFileUploadsRequest or JSON or IO
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :return: InitiateFileUploadsResponse. The InitiateFileUploadsResponse is compatible with
         MutableMapping
        :rtype: ~playfab.models.InitiateFileUploadsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        accept: Literal["application/json"] = kwargs.pop("accept", _headers.pop("accept", "application/json"))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.InitiateFileUploadsResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(initiate_file_uploads_request, (IO, bytes)):
            _content = initiate_file_uploads_request
        else:
            _content = json.dumps(initiate_file_uploads_request, cls=AzureJSONEncoder)  # type: ignore

        request = build_play_fab_initiate_file_uploads_request(
            x__entity_token=x__entity_token,
            accept=accept,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ApiErrorWrapper, response.json())
            raise HttpResponseError(response=response, model=error)

        deserialized = _deserialize(_models.InitiateFileUploadsResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    def get_objects(
        self,
        get_objects_request: _models.GetObjectsRequest,
        *,
        x__entity_token: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.GetObjectsResponse:
        """This feature is in private preview with a set of managed partners. Retrieves
        objects from an entity's profile.

        :param get_objects_request: Gets JSON objects from an entity profile and returns it. Required.
        :type get_objects_request: ~playfab.models.GetObjectsRequest
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: GetObjectsResponse. The GetObjectsResponse is compatible with MutableMapping
        :rtype: ~playfab.models.GetObjectsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def get_objects(
        self, get_objects_request: JSON, *, x__entity_token: str, content_type: str = "application/json", **kwargs: Any
    ) -> _models.GetObjectsResponse:
        """This feature is in private preview with a set of managed partners. Retrieves
        objects from an entity's profile.

        :param get_objects_request: Gets JSON objects from an entity profile and returns it. Required.
        :type get_objects_request: JSON
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: GetObjectsResponse. The GetObjectsResponse is compatible with MutableMapping
        :rtype: ~playfab.models.GetObjectsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def get_objects(
        self, get_objects_request: IO, *, x__entity_token: str, content_type: str = "application/json", **kwargs: Any
    ) -> _models.GetObjectsResponse:
        """This feature is in private preview with a set of managed partners. Retrieves
        objects from an entity's profile.

        :param get_objects_request: Gets JSON objects from an entity profile and returns it. Required.
        :type get_objects_request: IO
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: GetObjectsResponse. The GetObjectsResponse is compatible with MutableMapping
        :rtype: ~playfab.models.GetObjectsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def get_objects(
        self, get_objects_request: Union[_models.GetObjectsRequest, JSON, IO], *, x__entity_token: str, **kwargs: Any
    ) -> _models.GetObjectsResponse:
        """This feature is in private preview with a set of managed partners. Retrieves
        objects from an entity's profile.

        :param get_objects_request: Gets JSON objects from an entity profile and returns it. Is one of
         the following types: model, JSON, IO Required.
        :type get_objects_request: ~playfab.models.GetObjectsRequest or JSON or IO
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :return: GetObjectsResponse. The GetObjectsResponse is compatible with MutableMapping
        :rtype: ~playfab.models.GetObjectsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        accept: Literal["application/json"] = kwargs.pop("accept", _headers.pop("accept", "application/json"))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.GetObjectsResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(get_objects_request, (IO, bytes)):
            _content = get_objects_request
        else:
            _content = json.dumps(get_objects_request, cls=AzureJSONEncoder)  # type: ignore

        request = build_play_fab_get_objects_request(
            x__entity_token=x__entity_token,
            accept=accept,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ApiErrorWrapper, response.json())
            raise HttpResponseError(response=response, model=error)

        deserialized = _deserialize(_models.GetObjectsResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    def set_objects(
        self,
        set_objects_request: _models.SetObjectsRequest,
        *,
        x__entity_token: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.SetObjectsResponse:
        """This feature is in private preview with a set of managed partners. Sets objects
        on an entity's profile.

        :param set_objects_request: Sets JSON objects on the requested entity profile. May include a
         version number
         to be used to perform optimistic concurrency operations during update. If the
         current version differs from the version in the request the request will be
         ignored. If no version is set on the request then the value will always be
         updated if the values differ. Using the version value does not guarantee a
         write though, ConcurrentEditError may still occur if multiple clients are
         attempting to update the same profile. Required.
        :type set_objects_request: ~playfab.models.SetObjectsRequest
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: SetObjectsResponse. The SetObjectsResponse is compatible with MutableMapping
        :rtype: ~playfab.models.SetObjectsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def set_objects(
        self, set_objects_request: JSON, *, x__entity_token: str, content_type: str = "application/json", **kwargs: Any
    ) -> _models.SetObjectsResponse:
        """This feature is in private preview with a set of managed partners. Sets objects
        on an entity's profile.

        :param set_objects_request: Sets JSON objects on the requested entity profile. May include a
         version number
         to be used to perform optimistic concurrency operations during update. If the
         current version differs from the version in the request the request will be
         ignored. If no version is set on the request then the value will always be
         updated if the values differ. Using the version value does not guarantee a
         write though, ConcurrentEditError may still occur if multiple clients are
         attempting to update the same profile. Required.
        :type set_objects_request: JSON
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: SetObjectsResponse. The SetObjectsResponse is compatible with MutableMapping
        :rtype: ~playfab.models.SetObjectsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def set_objects(
        self, set_objects_request: IO, *, x__entity_token: str, content_type: str = "application/json", **kwargs: Any
    ) -> _models.SetObjectsResponse:
        """This feature is in private preview with a set of managed partners. Sets objects
        on an entity's profile.

        :param set_objects_request: Sets JSON objects on the requested entity profile. May include a
         version number
         to be used to perform optimistic concurrency operations during update. If the
         current version differs from the version in the request the request will be
         ignored. If no version is set on the request then the value will always be
         updated if the values differ. Using the version value does not guarantee a
         write though, ConcurrentEditError may still occur if multiple clients are
         attempting to update the same profile. Required.
        :type set_objects_request: IO
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: SetObjectsResponse. The SetObjectsResponse is compatible with MutableMapping
        :rtype: ~playfab.models.SetObjectsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def set_objects(
        self, set_objects_request: Union[_models.SetObjectsRequest, JSON, IO], *, x__entity_token: str, **kwargs: Any
    ) -> _models.SetObjectsResponse:
        """This feature is in private preview with a set of managed partners. Sets objects
        on an entity's profile.

        :param set_objects_request: Sets JSON objects on the requested entity profile. May include a
         version number
         to be used to perform optimistic concurrency operations during update. If the
         current version differs from the version in the request the request will be
         ignored. If no version is set on the request then the value will always be
         updated if the values differ. Using the version value does not guarantee a
         write though, ConcurrentEditError may still occur if multiple clients are
         attempting to update the same profile. Is one of the following types: model, JSON, IO
         Required.
        :type set_objects_request: ~playfab.models.SetObjectsRequest or JSON or IO
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :return: SetObjectsResponse. The SetObjectsResponse is compatible with MutableMapping
        :rtype: ~playfab.models.SetObjectsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        accept: Literal["application/json"] = kwargs.pop("accept", _headers.pop("accept", "application/json"))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.SetObjectsResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(set_objects_request, (IO, bytes)):
            _content = set_objects_request
        else:
            _content = json.dumps(set_objects_request, cls=AzureJSONEncoder)  # type: ignore

        request = build_play_fab_set_objects_request(
            x__entity_token=x__entity_token,
            accept=accept,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ApiErrorWrapper, response.json())
            raise HttpResponseError(response=response, model=error)

        deserialized = _deserialize(_models.SetObjectsResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    def write_events(
        self,
        write_events_request: _models.WriteEventsRequest,
        *,
        x__entity_token: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.WriteEventsResponse:
        """This feature is in private preview with a set of managed partners. Write
        batches of entity based events to PlayStream. The namespace of the Event must
        be 'custom' or start with 'custom.'.

        :param write_events_request: Required.
        :type write_events_request: ~playfab.models.WriteEventsRequest
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: WriteEventsResponse. The WriteEventsResponse is compatible with MutableMapping
        :rtype: ~playfab.models.WriteEventsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def write_events(
        self, write_events_request: JSON, *, x__entity_token: str, content_type: str = "application/json", **kwargs: Any
    ) -> _models.WriteEventsResponse:
        """This feature is in private preview with a set of managed partners. Write
        batches of entity based events to PlayStream. The namespace of the Event must
        be 'custom' or start with 'custom.'.

        :param write_events_request: Required.
        :type write_events_request: JSON
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: WriteEventsResponse. The WriteEventsResponse is compatible with MutableMapping
        :rtype: ~playfab.models.WriteEventsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def write_events(
        self, write_events_request: IO, *, x__entity_token: str, content_type: str = "application/json", **kwargs: Any
    ) -> _models.WriteEventsResponse:
        """This feature is in private preview with a set of managed partners. Write
        batches of entity based events to PlayStream. The namespace of the Event must
        be 'custom' or start with 'custom.'.

        :param write_events_request: Required.
        :type write_events_request: IO
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: WriteEventsResponse. The WriteEventsResponse is compatible with MutableMapping
        :rtype: ~playfab.models.WriteEventsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def write_events(
        self, write_events_request: Union[_models.WriteEventsRequest, JSON, IO], *, x__entity_token: str, **kwargs: Any
    ) -> _models.WriteEventsResponse:
        """This feature is in private preview with a set of managed partners. Write
        batches of entity based events to PlayStream. The namespace of the Event must
        be 'custom' or start with 'custom.'.

        :param write_events_request: Is one of the following types: model, JSON, IO Required.
        :type write_events_request: ~playfab.models.WriteEventsRequest or JSON or IO
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :return: WriteEventsResponse. The WriteEventsResponse is compatible with MutableMapping
        :rtype: ~playfab.models.WriteEventsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        accept: Literal["application/json"] = kwargs.pop("accept", _headers.pop("accept", "application/json"))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.WriteEventsResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(write_events_request, (IO, bytes)):
            _content = write_events_request
        else:
            _content = json.dumps(write_events_request, cls=AzureJSONEncoder)  # type: ignore

        request = build_play_fab_write_events_request(
            x__entity_token=x__entity_token,
            accept=accept,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ApiErrorWrapper, response.json())
            raise HttpResponseError(response=response, model=error)

        deserialized = _deserialize(_models.WriteEventsResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    def login_player(
        self,
        login_player_request: _models.LoginPlayerRequest,
        *,
        x__entity_token: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.LoginPlayerResult:
        """This feature is in private preview with a set of managed partners. Begins a
        title session for a master_player_account, returning an entity token for the
        associated title_player_account, creating a profile for it if necessary.

        :param login_player_request: Required.
        :type login_player_request: ~playfab.models.LoginPlayerRequest
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: LoginPlayerResult. The LoginPlayerResult is compatible with MutableMapping
        :rtype: ~playfab.models.LoginPlayerResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def login_player(
        self, login_player_request: JSON, *, x__entity_token: str, content_type: str = "application/json", **kwargs: Any
    ) -> _models.LoginPlayerResult:
        """This feature is in private preview with a set of managed partners. Begins a
        title session for a master_player_account, returning an entity token for the
        associated title_player_account, creating a profile for it if necessary.

        :param login_player_request: Required.
        :type login_player_request: JSON
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: LoginPlayerResult. The LoginPlayerResult is compatible with MutableMapping
        :rtype: ~playfab.models.LoginPlayerResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def login_player(
        self, login_player_request: IO, *, x__entity_token: str, content_type: str = "application/json", **kwargs: Any
    ) -> _models.LoginPlayerResult:
        """This feature is in private preview with a set of managed partners. Begins a
        title session for a master_player_account, returning an entity token for the
        associated title_player_account, creating a profile for it if necessary.

        :param login_player_request: Required.
        :type login_player_request: IO
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :return: LoginPlayerResult. The LoginPlayerResult is compatible with MutableMapping
        :rtype: ~playfab.models.LoginPlayerResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def login_player(
        self, login_player_request: Union[_models.LoginPlayerRequest, JSON, IO], *, x__entity_token: str, **kwargs: Any
    ) -> _models.LoginPlayerResult:
        """This feature is in private preview with a set of managed partners. Begins a
        title session for a master_player_account, returning an entity token for the
        associated title_player_account, creating a profile for it if necessary.

        :param login_player_request: Is one of the following types: model, JSON, IO Required.
        :type login_player_request: ~playfab.models.LoginPlayerRequest or JSON or IO
        :keyword x__entity_token: Token. Required.
        :paramtype x__entity_token: str
        :keyword accept: Accept header. Default value is "application/json". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype accept: str
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :return: LoginPlayerResult. The LoginPlayerResult is compatible with MutableMapping
        :rtype: ~playfab.models.LoginPlayerResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        accept: Literal["application/json"] = kwargs.pop("accept", _headers.pop("accept", "application/json"))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.LoginPlayerResult] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(login_player_request, (IO, bytes)):
            _content = login_player_request
        else:
            _content = json.dumps(login_player_request, cls=AzureJSONEncoder)  # type: ignore

        request = build_play_fab_login_player_request(
            x__entity_token=x__entity_token,
            accept=accept,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ApiErrorWrapper, response.json())
            raise HttpResponseError(response=response, model=error)

        deserialized = _deserialize(_models.LoginPlayerResult, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore
