# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import json
import sys
from typing import Any, AsyncIterable, Callable, Dict, IO, Optional, TypeVar, Union, cast, overload

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.polling import AsyncLROPoller, AsyncNoPolling, AsyncPollingMethod
from azure.core.polling.async_base_polling import AsyncLROBasePolling
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ... import models as _models
from ..._model_base import AzureJSONEncoder, _deserialize
from ..._operations._operations import (
    build_adp_cancel_request,
    build_adp_complete_request,
    build_adp_create_or_replace_request,
    build_adp_generate_request,
    build_adp_get_request,
    build_adp_list_request,
)
from .._vendor import ADPClientMixinABC

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class ADPClientOperationsMixin(ADPClientMixinABC):  # pylint: disable=too-many-public-methods
    async def _get_initial(
        self, operation_id: str, *, api_version: str, **kwargs: Any
    ) -> _models.LongRunningOperationWithResponseHeaders:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[_models.LongRunningOperationWithResponseHeaders]

        request = build_adp_get_request(
            operation_id=operation_id,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))
        response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))

        deserialized = _deserialize(_models.LongRunningOperationWithResponseHeaders, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized

    @distributed_trace_async
    async def begin_get(
        self, operation_id: str, *, api_version: str, **kwargs: Any
    ) -> AsyncLROPoller[_models.LongRunningOperationWithResponseHeaders]:
        """Get the details of an LRO.

        :param operation_id: The operation Id. Required.
        :type operation_id: str
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be AsyncLROBasePolling. Pass in False
         for this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.AsyncPollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of AsyncLROPoller that returns LongRunningOperationWithResponseHeaders.
         The LongRunningOperationWithResponseHeaders is compatible with MutableMapping
        :rtype: ~azure.core.polling.AsyncLROPoller[~adp.models.LongRunningOperationWithResponseHeaders]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[_models.LongRunningOperationWithResponseHeaders]
        polling = kwargs.pop("polling", True)  # type: Union[bool, AsyncPollingMethod]
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token = kwargs.pop("continuation_token", None)  # type: Optional[str]
        if cont_token is None:
            raw_result = await self._get_initial(  # type: ignore
                operation_id=operation_id,
                api_version=api_version,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response_headers = {}
            response = pipeline_response.http_response
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))

            deserialized = _deserialize(_models.LongRunningOperationWithResponseHeaders, response.json())
            if cls:
                return cls(pipeline_response, deserialized, response_headers)
            return deserialized

        if polling is True:
            polling_method = cast(
                AsyncPollingMethod, AsyncLROBasePolling(lro_delay, **kwargs)
            )  # type: AsyncPollingMethod
        elif polling is False:
            polling_method = cast(AsyncPollingMethod, AsyncNoPolling())
        else:
            polling_method = polling
        if cont_token:
            return AsyncLROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return AsyncLROPoller(self._client, raw_result, get_long_running_output, polling_method)

    @overload
    async def create_or_replace(
        self,
        discovery_id: str,
        body: Union[Optional[_models.DiscoveryCreationParameters], JSON] = None,
        *,
        api_version: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Discovery:
        """Creates a new ingestion discovery instance.

        :param discovery_id: The discovery identifier. Required.
        :type discovery_id: str
        :param body: Auto-generated wrapper for template parameter 'DiscoveryCreationParameters'.
         Default value is None.
        :type body: ~adp.models.DiscoveryCreationParameters or JSON
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: Discovery. The Discovery is compatible with MutableMapping
        :rtype: ~adp.models.Discovery
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def create_or_replace(
        self,
        discovery_id: str,
        body: Optional[IO] = None,
        *,
        api_version: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Discovery:
        """Creates a new ingestion discovery instance.

        :param discovery_id: The discovery identifier. Required.
        :type discovery_id: str
        :param body: Auto-generated wrapper for template parameter 'DiscoveryCreationParameters'.
         Default value is None.
        :type body: IO
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: Discovery. The Discovery is compatible with MutableMapping
        :rtype: ~adp.models.Discovery
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def create_or_replace(
        self,
        discovery_id: str,
        body: Union[Optional[Union[_models.DiscoveryCreationParameters, JSON, IO]]] = None,
        *,
        api_version: str,
        **kwargs: Any
    ) -> _models.Discovery:
        """Creates a new ingestion discovery instance.

        :param discovery_id: The discovery identifier. Required.
        :type discovery_id: str
        :param body: Auto-generated wrapper for template parameter 'DiscoveryCreationParameters'. Is
         either a model type or a IO type. Default value is None.
        :type body: ~adp.models.DiscoveryCreationParameters or JSON or IO
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :return: Discovery. The Discovery is compatible with MutableMapping
        :rtype: ~adp.models.Discovery
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[_models.Discovery]

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _content = json.dumps(body, cls=AzureJSONEncoder)
            else:
                _content = None

        request = build_adp_create_or_replace_request(
            discovery_id=discovery_id,
            api_version=api_version,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = _deserialize(_models.Discovery, response.json())

        if response.status_code == 201:
            deserialized = _deserialize(_models.Discovery, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    @distributed_trace_async
    async def get(self, discovery_id: str, *, api_version: str, **kwargs: Any) -> _models.Discovery:
        """Get discovery by ID.

        :param discovery_id: The discovery identifier. Required.
        :type discovery_id: str
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :return: Discovery. The Discovery is compatible with MutableMapping
        :rtype: ~adp.models.Discovery
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[_models.Discovery]

        request = build_adp_get_request(
            discovery_id=discovery_id,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = _deserialize(_models.Discovery, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    async def _complete_initial(
        self, discovery_id: str, *, api_version: str, operation_id: Optional[str] = None, **kwargs: Any
    ) -> _models.DiscoveryLroResponse:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[_models.DiscoveryLroResponse]

        request = build_adp_complete_request(
            discovery_id=discovery_id,
            api_version=api_version,
            operation_id=operation_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.CustomErrorResponseWithXMsErrorCodeHeader, response.json())
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["Operation-Location"] = self._deserialize("str", response.headers.get("Operation-Location"))

        deserialized = _deserialize(_models.DiscoveryLroResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized

    @distributed_trace_async
    async def begin_complete(
        self, discovery_id: str, *, api_version: str, operation_id: Optional[str] = None, **kwargs: Any
    ) -> AsyncLROPoller[_models.DiscoveryLroResponse]:
        """Initiates the process of completing the discovery and creating the upload file grouping
        manifest files.

        :param discovery_id: The discovery identifier. Required.
        :type discovery_id: str
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :keyword operation_id: The long running operation identifier. Operation-Id should be valid UUID
         string. Default value is None.
        :paramtype operation_id: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be AsyncLROBasePolling. Pass in False
         for this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.AsyncPollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of AsyncLROPoller that returns DiscoveryLroResponse. The
         DiscoveryLroResponse is compatible with MutableMapping
        :rtype: ~azure.core.polling.AsyncLROPoller[~adp.models.DiscoveryLroResponse]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[_models.DiscoveryLroResponse]
        polling = kwargs.pop("polling", True)  # type: Union[bool, AsyncPollingMethod]
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token = kwargs.pop("continuation_token", None)  # type: Optional[str]
        if cont_token is None:
            raw_result = await self._complete_initial(  # type: ignore
                discovery_id=discovery_id,
                api_version=api_version,
                operation_id=operation_id,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response_headers = {}
            response = pipeline_response.http_response
            response_headers["Operation-Location"] = self._deserialize(
                "str", response.headers.get("Operation-Location")
            )

            deserialized = _deserialize(_models.DiscoveryLroResponse, response.json())
            if cls:
                return cls(pipeline_response, deserialized, response_headers)
            return deserialized

        if polling is True:
            polling_method = cast(
                AsyncPollingMethod, AsyncLROBasePolling(lro_delay, **kwargs)
            )  # type: AsyncPollingMethod
        elif polling is False:
            polling_method = cast(AsyncPollingMethod, AsyncNoPolling())
        else:
            polling_method = polling
        if cont_token:
            return AsyncLROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return AsyncLROPoller(self._client, raw_result, get_long_running_output, polling_method)

    async def _cancel_initial(
        self, discovery_id: str, *, api_version: str, operation_id: Optional[str] = None, **kwargs: Any
    ) -> _models.DiscoveryLroResponse:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[_models.DiscoveryLroResponse]

        request = build_adp_cancel_request(
            discovery_id=discovery_id,
            api_version=api_version,
            operation_id=operation_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.CustomErrorResponseWithXMsErrorCodeHeader, response.json())
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["Operation-Location"] = self._deserialize("str", response.headers.get("Operation-Location"))

        deserialized = _deserialize(_models.DiscoveryLroResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized

    @distributed_trace_async
    async def begin_cancel(
        self, discovery_id: str, *, api_version: str, operation_id: Optional[str] = None, **kwargs: Any
    ) -> AsyncLROPoller[_models.DiscoveryLroResponse]:
        """Initiates the process of cancelling the discovery.

        :param discovery_id: The discovery identifier. Required.
        :type discovery_id: str
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :keyword operation_id: The long running operation identifier. Operation-Id should be valid UUID
         string. Default value is None.
        :paramtype operation_id: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be AsyncLROBasePolling. Pass in False
         for this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.AsyncPollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of AsyncLROPoller that returns DiscoveryLroResponse. The
         DiscoveryLroResponse is compatible with MutableMapping
        :rtype: ~azure.core.polling.AsyncLROPoller[~adp.models.DiscoveryLroResponse]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[_models.DiscoveryLroResponse]
        polling = kwargs.pop("polling", True)  # type: Union[bool, AsyncPollingMethod]
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token = kwargs.pop("continuation_token", None)  # type: Optional[str]
        if cont_token is None:
            raw_result = await self._cancel_initial(  # type: ignore
                discovery_id=discovery_id,
                api_version=api_version,
                operation_id=operation_id,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response_headers = {}
            response = pipeline_response.http_response
            response_headers["Operation-Location"] = self._deserialize(
                "str", response.headers.get("Operation-Location")
            )

            deserialized = _deserialize(_models.DiscoveryLroResponse, response.json())
            if cls:
                return cls(pipeline_response, deserialized, response_headers)
            return deserialized

        if polling is True:
            polling_method = cast(
                AsyncPollingMethod, AsyncLROBasePolling(lro_delay, **kwargs)
            )  # type: AsyncPollingMethod
        elif polling is False:
            polling_method = cast(AsyncPollingMethod, AsyncNoPolling())
        else:
            polling_method = polling
        if cont_token:
            return AsyncLROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return AsyncLROPoller(self._client, raw_result, get_long_running_output, polling_method)

    @distributed_trace
    def list(
        self, discovery_id: str, *, api_version: str, **kwargs: Any
    ) -> AsyncIterable["_models.DiscoverySpecialFile"]:
        """List special files details for the discovery resource.

        :param discovery_id: The discovery identifier. Required.
        :type discovery_id: str
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :return: An iterator like instance of DiscoverySpecialFile. The DiscoverySpecialFile is
         compatible with MutableMapping
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~adp.models.DiscoverySpecialFile]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[_models._models.PagedDiscoverySpecialFile]

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_adp_list_request(
                    discovery_id=discovery_id,
                    api_version=api_version,
                    headers=_headers,
                    params=_params,
                )
                request.url = self._client.format_url(request.url)  # type: ignore

            else:
                request = HttpRequest("GET", next_link)
                request.url = self._client.format_url(request.url)  # type: ignore

            return request

        async def extract_data(pipeline_response):
            deserialized = _deserialize(_models._models.PagedDiscoverySpecialFile, pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request, stream=False, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    async def _generate_initial(
        self, discovery_id: str, *, api_version: str, **kwargs: Any
    ) -> _models.DiscoveryLroResponse:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[_models.DiscoveryLroResponse]

        request = build_adp_generate_request(
            discovery_id=discovery_id,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["Operation-Location"] = self._deserialize("str", response.headers.get("Operation-Location"))

        deserialized = _deserialize(_models.DiscoveryLroResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized

    @distributed_trace_async
    async def begin_generate(
        self, discovery_id: str, *, api_version: str, **kwargs: Any
    ) -> AsyncLROPoller[_models.DiscoveryLroResponse]:
        """Initiates the process of generating SAS signed URIs for uploading special files for the
        discovery.

        :param discovery_id: The discovery identifier. Required.
        :type discovery_id: str
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be AsyncLROBasePolling. Pass in False
         for this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.AsyncPollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of AsyncLROPoller that returns DiscoveryLroResponse. The
         DiscoveryLroResponse is compatible with MutableMapping
        :rtype: ~azure.core.polling.AsyncLROPoller[~adp.models.DiscoveryLroResponse]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[_models.DiscoveryLroResponse]
        polling = kwargs.pop("polling", True)  # type: Union[bool, AsyncPollingMethod]
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token = kwargs.pop("continuation_token", None)  # type: Optional[str]
        if cont_token is None:
            raw_result = await self._generate_initial(  # type: ignore
                discovery_id=discovery_id,
                api_version=api_version,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response_headers = {}
            response = pipeline_response.http_response
            response_headers["Operation-Location"] = self._deserialize(
                "str", response.headers.get("Operation-Location")
            )

            deserialized = _deserialize(_models.DiscoveryLroResponse, response.json())
            if cls:
                return cls(pipeline_response, deserialized, response_headers)
            return deserialized

        if polling is True:
            polling_method = cast(
                AsyncPollingMethod, AsyncLROBasePolling(lro_delay, **kwargs)
            )  # type: AsyncPollingMethod
        elif polling is False:
            polling_method = cast(AsyncPollingMethod, AsyncNoPolling())
        else:
            polling_method = polling
        if cont_token:
            return AsyncLROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return AsyncLROPoller(self._client, raw_result, get_long_running_output, polling_method)

    @distributed_trace
    def list(self, discovery_id: str, *, api_version: str, **kwargs: Any) -> AsyncIterable["_models.DiscoveryUpload"]:
        """List upload detail for the discovery resource.

        :param discovery_id: The discovery identifier. Required.
        :type discovery_id: str
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :return: An iterator like instance of DiscoveryUpload. The DiscoveryUpload is compatible with
         MutableMapping
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~adp.models.DiscoveryUpload]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[_models._models.PagedDiscoveryUpload]

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_adp_list_request(
                    discovery_id=discovery_id,
                    api_version=api_version,
                    headers=_headers,
                    params=_params,
                )
                request.url = self._client.format_url(request.url)  # type: ignore

            else:
                request = HttpRequest("GET", next_link)
                request.url = self._client.format_url(request.url)  # type: ignore

            return request

        async def extract_data(pipeline_response):
            deserialized = _deserialize(_models._models.PagedDiscoveryUpload, pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request, stream=False, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    @overload
    async def create_or_replace(
        self,
        upload_id: str,
        body: Union[Optional[_models.UploadCreationParameters], JSON] = None,
        *,
        api_version: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Upload:
        """Creates a new ingestion upload instance.

        :param upload_id: The upload resource identifier. Required.
        :type upload_id: str
        :param body: Auto-generated wrapper for template parameter 'UploadCreationParameters'. Default
         value is None.
        :type body: ~adp.models.UploadCreationParameters or JSON
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: Upload. The Upload is compatible with MutableMapping
        :rtype: ~adp.models.Upload
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def create_or_replace(
        self,
        upload_id: str,
        body: Optional[IO] = None,
        *,
        api_version: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Upload:
        """Creates a new ingestion upload instance.

        :param upload_id: The upload resource identifier. Required.
        :type upload_id: str
        :param body: Auto-generated wrapper for template parameter 'UploadCreationParameters'. Default
         value is None.
        :type body: IO
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: Upload. The Upload is compatible with MutableMapping
        :rtype: ~adp.models.Upload
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def create_or_replace(
        self,
        upload_id: str,
        body: Union[Optional[Union[_models.UploadCreationParameters, JSON, IO]]] = None,
        *,
        api_version: str,
        **kwargs: Any
    ) -> _models.Upload:
        """Creates a new ingestion upload instance.

        :param upload_id: The upload resource identifier. Required.
        :type upload_id: str
        :param body: Auto-generated wrapper for template parameter 'UploadCreationParameters'. Is
         either a model type or a IO type. Default value is None.
        :type body: ~adp.models.UploadCreationParameters or JSON or IO
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :return: Upload. The Upload is compatible with MutableMapping
        :rtype: ~adp.models.Upload
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[_models.Upload]

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _content = json.dumps(body, cls=AzureJSONEncoder)
            else:
                _content = None

        request = build_adp_create_or_replace_request(
            upload_id=upload_id,
            api_version=api_version,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = _deserialize(_models.Upload, response.json())

        if response.status_code == 201:
            deserialized = _deserialize(_models.Upload, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    @distributed_trace_async
    async def get(self, upload_id: str, *, api_version: str, **kwargs: Any) -> _models.Upload:
        """Get discovery by ID.

        :param upload_id: The upload resource identifier. Required.
        :type upload_id: str
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :return: Upload. The Upload is compatible with MutableMapping
        :rtype: ~adp.models.Upload
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[_models.Upload]

        request = build_adp_get_request(
            upload_id=upload_id,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = _deserialize(_models.Upload, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    async def _complete_initial(
        self, upload_id: str, *, api_version: str, operation_id: Optional[str] = None, **kwargs: Any
    ) -> _models.UploadLroResponse:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[_models.UploadLroResponse]

        request = build_adp_complete_request(
            upload_id=upload_id,
            api_version=api_version,
            operation_id=operation_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.CustomErrorResponseWithXMsErrorCodeHeader, response.json())
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["Operation-Location"] = self._deserialize("str", response.headers.get("Operation-Location"))

        deserialized = _deserialize(_models.UploadLroResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized

    @distributed_trace_async
    async def begin_complete(
        self, upload_id: str, *, api_version: str, operation_id: Optional[str] = None, **kwargs: Any
    ) -> AsyncLROPoller[_models.UploadLroResponse]:
        """Initiates the process of completing the upload and creating the measurements.

        :param upload_id: The upload resource identifier. Required.
        :type upload_id: str
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :keyword operation_id: The long running operation identifier. Operation-Id should be valid UUID
         string. Default value is None.
        :paramtype operation_id: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be AsyncLROBasePolling. Pass in False
         for this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.AsyncPollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of AsyncLROPoller that returns UploadLroResponse. The UploadLroResponse is
         compatible with MutableMapping
        :rtype: ~azure.core.polling.AsyncLROPoller[~adp.models.UploadLroResponse]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[_models.UploadLroResponse]
        polling = kwargs.pop("polling", True)  # type: Union[bool, AsyncPollingMethod]
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token = kwargs.pop("continuation_token", None)  # type: Optional[str]
        if cont_token is None:
            raw_result = await self._complete_initial(  # type: ignore
                upload_id=upload_id,
                api_version=api_version,
                operation_id=operation_id,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response_headers = {}
            response = pipeline_response.http_response
            response_headers["Operation-Location"] = self._deserialize(
                "str", response.headers.get("Operation-Location")
            )

            deserialized = _deserialize(_models.UploadLroResponse, response.json())
            if cls:
                return cls(pipeline_response, deserialized, response_headers)
            return deserialized

        if polling is True:
            polling_method = cast(
                AsyncPollingMethod, AsyncLROBasePolling(lro_delay, **kwargs)
            )  # type: AsyncPollingMethod
        elif polling is False:
            polling_method = cast(AsyncPollingMethod, AsyncNoPolling())
        else:
            polling_method = polling
        if cont_token:
            return AsyncLROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return AsyncLROPoller(self._client, raw_result, get_long_running_output, polling_method)

    async def _cancel_initial(
        self, upload_id: str, *, api_version: str, operation_id: Optional[str] = None, **kwargs: Any
    ) -> _models.UploadLroResponse:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[_models.UploadLroResponse]

        request = build_adp_cancel_request(
            upload_id=upload_id,
            api_version=api_version,
            operation_id=operation_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.CustomErrorResponseWithXMsErrorCodeHeader, response.json())
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["Operation-Location"] = self._deserialize("str", response.headers.get("Operation-Location"))

        deserialized = _deserialize(_models.UploadLroResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized

    @distributed_trace_async
    async def begin_cancel(
        self, upload_id: str, *, api_version: str, operation_id: Optional[str] = None, **kwargs: Any
    ) -> AsyncLROPoller[_models.UploadLroResponse]:
        """Initiates the process of cancelling the upload.

        :param upload_id: The upload resource identifier. Required.
        :type upload_id: str
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :keyword operation_id: The long running operation identifier. Operation-Id should be valid UUID
         string. Default value is None.
        :paramtype operation_id: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be AsyncLROBasePolling. Pass in False
         for this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.AsyncPollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of AsyncLROPoller that returns UploadLroResponse. The UploadLroResponse is
         compatible with MutableMapping
        :rtype: ~azure.core.polling.AsyncLROPoller[~adp.models.UploadLroResponse]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[_models.UploadLroResponse]
        polling = kwargs.pop("polling", True)  # type: Union[bool, AsyncPollingMethod]
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token = kwargs.pop("continuation_token", None)  # type: Optional[str]
        if cont_token is None:
            raw_result = await self._cancel_initial(  # type: ignore
                upload_id=upload_id,
                api_version=api_version,
                operation_id=operation_id,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response_headers = {}
            response = pipeline_response.http_response
            response_headers["Operation-Location"] = self._deserialize(
                "str", response.headers.get("Operation-Location")
            )

            deserialized = _deserialize(_models.UploadLroResponse, response.json())
            if cls:
                return cls(pipeline_response, deserialized, response_headers)
            return deserialized

        if polling is True:
            polling_method = cast(
                AsyncPollingMethod, AsyncLROBasePolling(lro_delay, **kwargs)
            )  # type: AsyncPollingMethod
        elif polling is False:
            polling_method = cast(AsyncPollingMethod, AsyncNoPolling())
        else:
            polling_method = polling
        if cont_token:
            return AsyncLROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return AsyncLROPoller(self._client, raw_result, get_long_running_output, polling_method)

    @distributed_trace
    def list(self, upload_id: str, *, api_version: str, **kwargs: Any) -> AsyncIterable["_models.UploadSpecialFile"]:
        """List special files for the upload.

        :param upload_id: The upload resource identifier. Required.
        :type upload_id: str
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :return: An iterator like instance of UploadSpecialFile. The UploadSpecialFile is compatible
         with MutableMapping
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~adp.models.UploadSpecialFile]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[_models._models.PagedUploadSpecialFile]

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_adp_list_request(
                    upload_id=upload_id,
                    api_version=api_version,
                    headers=_headers,
                    params=_params,
                )
                request.url = self._client.format_url(request.url)  # type: ignore

            else:
                request = HttpRequest("GET", next_link)
                request.url = self._client.format_url(request.url)  # type: ignore

            return request

        async def extract_data(pipeline_response):
            deserialized = _deserialize(_models._models.PagedUploadSpecialFile, pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request, stream=False, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    async def _generate_initial(self, upload_id: str, *, api_version: str, **kwargs: Any) -> _models.UploadLroResponse:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[_models.UploadLroResponse]

        request = build_adp_generate_request(
            upload_id=upload_id,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["Operation-Location"] = self._deserialize("str", response.headers.get("Operation-Location"))

        deserialized = _deserialize(_models.UploadLroResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized

    @distributed_trace_async
    async def begin_generate(
        self, upload_id: str, *, api_version: str, **kwargs: Any
    ) -> AsyncLROPoller[_models.UploadLroResponse]:
        """Initiates the process of generating SAS signed URIs for uploading special files for the upload.

        :param upload_id: The upload resource identifier. Required.
        :type upload_id: str
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be AsyncLROBasePolling. Pass in False
         for this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.AsyncPollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of AsyncLROPoller that returns UploadLroResponse. The UploadLroResponse is
         compatible with MutableMapping
        :rtype: ~azure.core.polling.AsyncLROPoller[~adp.models.UploadLroResponse]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[_models.UploadLroResponse]
        polling = kwargs.pop("polling", True)  # type: Union[bool, AsyncPollingMethod]
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token = kwargs.pop("continuation_token", None)  # type: Optional[str]
        if cont_token is None:
            raw_result = await self._generate_initial(  # type: ignore
                upload_id=upload_id,
                api_version=api_version,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response_headers = {}
            response = pipeline_response.http_response
            response_headers["Operation-Location"] = self._deserialize(
                "str", response.headers.get("Operation-Location")
            )

            deserialized = _deserialize(_models.UploadLroResponse, response.json())
            if cls:
                return cls(pipeline_response, deserialized, response_headers)
            return deserialized

        if polling is True:
            polling_method = cast(
                AsyncPollingMethod, AsyncLROBasePolling(lro_delay, **kwargs)
            )  # type: AsyncPollingMethod
        elif polling is False:
            polling_method = cast(AsyncPollingMethod, AsyncNoPolling())
        else:
            polling_method = polling
        if cont_token:
            return AsyncLROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return AsyncLROPoller(self._client, raw_result, get_long_running_output, polling_method)

    @distributed_trace
    def list(self, upload_id: str, *, api_version: str, **kwargs: Any) -> AsyncIterable["_models.UploadDataFile"]:
        """List data files for the upload.

        :param upload_id: The upload resource identifier. Required.
        :type upload_id: str
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :return: An iterator like instance of UploadDataFile. The UploadDataFile is compatible with
         MutableMapping
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~adp.models.UploadDataFile]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[_models._models.PagedUploadDataFile]

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_adp_list_request(
                    upload_id=upload_id,
                    api_version=api_version,
                    headers=_headers,
                    params=_params,
                )
                request.url = self._client.format_url(request.url)  # type: ignore

            else:
                request = HttpRequest("GET", next_link)
                request.url = self._client.format_url(request.url)  # type: ignore

            return request

        async def extract_data(pipeline_response):
            deserialized = _deserialize(_models._models.PagedUploadDataFile, pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request, stream=False, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    async def _generate_initial(self, upload_id: str, *, api_version: str, **kwargs: Any) -> _models.UploadLroResponse:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[_models.UploadLroResponse]

        request = build_adp_generate_request(
            upload_id=upload_id,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["Operation-Location"] = self._deserialize("str", response.headers.get("Operation-Location"))

        deserialized = _deserialize(_models.UploadLroResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized

    @distributed_trace_async
    async def begin_generate(
        self, upload_id: str, *, api_version: str, **kwargs: Any
    ) -> AsyncLROPoller[_models.UploadLroResponse]:
        """Initiates the process of sharding the data files.

        :param upload_id: The upload resource identifier. Required.
        :type upload_id: str
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be AsyncLROBasePolling. Pass in False
         for this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.AsyncPollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of AsyncLROPoller that returns UploadLroResponse. The UploadLroResponse is
         compatible with MutableMapping
        :rtype: ~azure.core.polling.AsyncLROPoller[~adp.models.UploadLroResponse]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[_models.UploadLroResponse]
        polling = kwargs.pop("polling", True)  # type: Union[bool, AsyncPollingMethod]
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token = kwargs.pop("continuation_token", None)  # type: Optional[str]
        if cont_token is None:
            raw_result = await self._generate_initial(  # type: ignore
                upload_id=upload_id,
                api_version=api_version,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response_headers = {}
            response = pipeline_response.http_response
            response_headers["Operation-Location"] = self._deserialize(
                "str", response.headers.get("Operation-Location")
            )

            deserialized = _deserialize(_models.UploadLroResponse, response.json())
            if cls:
                return cls(pipeline_response, deserialized, response_headers)
            return deserialized

        if polling is True:
            polling_method = cast(
                AsyncPollingMethod, AsyncLROBasePolling(lro_delay, **kwargs)
            )  # type: AsyncPollingMethod
        elif polling is False:
            polling_method = cast(AsyncPollingMethod, AsyncNoPolling())
        else:
            polling_method = polling
        if cont_token:
            return AsyncLROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return AsyncLROPoller(self._client, raw_result, get_long_running_output, polling_method)

    @distributed_trace
    def list(
        self, upload_id: str, *, api_version: str, **kwargs: Any
    ) -> AsyncIterable["_models.UploadResultMeasurement"]:
        """List of the measurement identifiers that have been created by the upload.

        :param upload_id: The upload resource identifier. Required.
        :type upload_id: str
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :return: An iterator like instance of UploadResultMeasurement. The UploadResultMeasurement is
         compatible with MutableMapping
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~adp.models.UploadResultMeasurement]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[_models._models.PagedUploadResultMeasurement]

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_adp_list_request(
                    upload_id=upload_id,
                    api_version=api_version,
                    headers=_headers,
                    params=_params,
                )
                request.url = self._client.format_url(request.url)  # type: ignore

            else:
                request = HttpRequest("GET", next_link)
                request.url = self._client.format_url(request.url)  # type: ignore

            return request

        async def extract_data(pipeline_response):
            deserialized = _deserialize(_models._models.PagedUploadResultMeasurement, pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request, stream=False, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)
